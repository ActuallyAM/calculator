!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(h,e){"use strict";var t=[],g=h.document,n=Object.getPrototypeOf,s=t.slice,v=t.concat,u=t.push,i=t.indexOf,r={},o=r.toString,m=r.hasOwnProperty,a=m.toString,l=a.call(Object),y={};function b(e,t){var n=(t=t||g).createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function c(e,t){return t.toUpperCase()}var f="3.2.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/parseXML,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-event/ajax,-effects,-effects/Tween,-effects/animatedSelector",x=function(e,t){return new x.fn.init(e,t)},d=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,w=/-([a-z])/g;function C(e){var t=!!e&&"length"in e&&e.length,n=x.type(e);return"function"!==n&&!x.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}x.fn=x.prototype={jquery:f,constructor:x,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){e=x.merge(this.constructor(),e);return e.prevObject=this,e},each:function(e){return x.each(this,e)},map:function(n){return this.pushStack(x.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,e=+e+(e<0?t:0);return this.pushStack(0<=e&&e<t?[this[e]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:t.sort,splice:t.splice},x.extend=x.fn.extend=function(){var e,t,n,r,i,o=arguments[0]||{},a=1,s=arguments.length,u=!1;for("boolean"==typeof o&&(u=o,o=arguments[a]||{},a++),"object"==typeof o||x.isFunction(o)||(o={}),a===s&&(o=this,a--);a<s;a++)if(null!=(e=arguments[a]))for(t in e)i=o[t],n=e[t],o!==n&&(u&&n&&(x.isPlainObject(n)||(r=Array.isArray(n)))?(i=r?(r=!1,i&&Array.isArray(i)?i:[]):i&&x.isPlainObject(i)?i:{},o[t]=x.extend(u,i,n)):void 0!==n&&(o[t]=n));return o},x.extend({expando:"jQuery"+(f+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===x.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=x.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){return!(!e||"[object Object]"!==o.call(e)||(e=n(e))&&("function"!=typeof(e=m.call(e,"constructor")&&e.constructor)||a.call(e)!==l))},isEmptyObject:function(e){for(var t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?r[o.call(e)]||"object":typeof e},globalEval:function(e){b(e)},camelCase:function(e){return e.replace(p,"ms-").replace(w,c)},each:function(e,t){var n,r=0;if(C(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(d,"")},makeArray:function(e,t){t=t||[];return null!=e&&(C(Object(e))?x.merge(t,"string"==typeof e?[e]:e):u.call(t,e)),t},inArray:function(e,t,n){return null==t?-1:i.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!=a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(C(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)i=t(e[o],o,n),null!=i&&a.push(i);return v.apply([],a)},guid:1,proxy:function(e,t){var n,r;if("string"==typeof t&&(r=e[t],t=e,e=r),x.isFunction(e))return n=s.call(arguments,2),(r=function(){return e.apply(t||this,n.concat(s.call(arguments)))}).guid=e.guid=e.guid||x.guid++,r},now:Date.now,support:y}),"function"==typeof Symbol&&(x.fn[Symbol.iterator]=t[Symbol.iterator]),x.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){r["[object "+t+"]"]=t.toLowerCase()});var T=function(n){function f(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(65536+r):String.fromCharCode(r>>10|55296,1023&r|56320)}function p(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e}function r(){C()}var e,h,x,o,i,g,d,v,w,u,l,C,T,a,E,m,s,c,y,N="sizzle"+ +new Date,b=n.document,A=0,k=0,D=ae(),S=ae(),L=ae(),j=function(e,t){return e===t&&(l=!0),0},q={}.hasOwnProperty,t=[],O=t.pop,F=t.push,H=t.push,P=t.slice,I=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",B="[\\x20\\t\\r\\n\\f]",W="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",M="\\["+B+"*("+W+")(?:"+B+"*([*^$|!~]?=)"+B+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+W+"))|)"+B+"*\\]",$=":("+W+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+M+")*)|.*)\\)|)",z=new RegExp(B+"+","g"),_=new RegExp("^"+B+"+|((?:^|[^\\\\])(?:\\\\.)*)"+B+"+$","g"),U=new RegExp("^"+B+"*,"+B+"*"),V=new RegExp("^"+B+"*([>+~]|"+B+")"+B+"*"),X=new RegExp("="+B+"*([^\\]'\"]*?)"+B+"*\\]","g"),Q=new RegExp($),Y=new RegExp("^"+W+"$"),G={ID:new RegExp("^#("+W+")"),CLASS:new RegExp("^\\.("+W+")"),TAG:new RegExp("^("+W+"|[*])"),ATTR:new RegExp("^"+M),PSEUDO:new RegExp("^"+$),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+B+"*(even|odd|(([+-]|)(\\d*)n|)"+B+"*(?:([+-]|)"+B+"*(\\d+)|))"+B+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+B+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+B+"*((?:-\\d)?\\d*)"+B+"*\\)|)(?=[^-]|$)","i")},K=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,ee=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,te=/[+~]/,ne=new RegExp("\\\\([\\da-f]{1,6}"+B+"?|("+B+")|.)","ig"),re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=ve(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{H.apply(t=P.call(b.childNodes),b.childNodes),t[b.childNodes.length].nodeType}catch(e){H={apply:t.length?function(e,t){F.apply(e,P.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function oe(e,t,n,r){var i,o,a,s,u,l,c,f=t&&t.ownerDocument,d=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==d&&9!==d&&11!==d)return n;if(!r&&((t?t.ownerDocument||t:b)!==T&&C(t),t=t||T,E)){if(11!==d&&(u=ee.exec(e)))if(i=u[1]){if(9===d){if(!(a=t.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(f&&(a=f.getElementById(i))&&y(t,a)&&a.id===i)return n.push(a),n}else{if(u[2])return H.apply(n,t.getElementsByTagName(e)),n;if((i=u[3])&&h.getElementsByClassName&&t.getElementsByClassName)return H.apply(n,t.getElementsByClassName(i)),n}if(h.qsa&&!L[e+" "]&&(!m||!m.test(e))){if(1!==d)f=t,c=e;else if("object"!==t.nodeName.toLowerCase()){for((s=t.getAttribute("id"))?s=s.replace(re,p):t.setAttribute("id",s=N),o=(l=g(e)).length;o--;)l[o]="#"+s+" "+ge(l[o]);c=l.join(","),f=te.test(e)&&pe(t.parentNode)||t}if(c)try{return H.apply(n,f.querySelectorAll(c)),n}catch(e){}finally{s===N&&t.removeAttribute("id")}}}return v(e.replace(_,"$1"),t,n,r)}function ae(){var n=[];function r(e,t){return n.push(e+" ")>x.cacheLength&&delete r[n.shift()],r[e+" "]=t}return r}function se(e){return e[N]=!0,e}function ue(e){var t=T.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t)}}function le(e,t){for(var n=e.split("|"),r=n.length;r--;)x.attrHandle[n[r]]=t}function ce(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ie(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function de(a){return se(function(o){return o=+o,se(function(e,t){for(var n,r=a([],e.length,o),i=r.length;i--;)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function pe(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in h=oe.support={},i=oe.isXML=function(e){e=e&&(e.ownerDocument||e).documentElement;return!!e&&"HTML"!==e.nodeName},C=oe.setDocument=function(e){var t,e=e?e.ownerDocument||e:b;return e!==T&&9===e.nodeType&&e.documentElement&&(a=(T=e).documentElement,E=!i(T),b!==T&&(t=T.defaultView)&&t.top!==t&&(t.addEventListener?t.addEventListener("unload",r,!1):t.attachEvent&&t.attachEvent("onunload",r)),h.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),h.getElementsByTagName=ue(function(e){return e.appendChild(T.createComment("")),!e.getElementsByTagName("*").length}),h.getElementsByClassName=Z.test(T.getElementsByClassName),h.getById=ue(function(e){return a.appendChild(e).id=N,!T.getElementsByName||!T.getElementsByName(N).length}),h.getById?(x.filter.ID=function(e){var t=e.replace(ne,f);return function(e){return e.getAttribute("id")===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&E){e=t.getElementById(e);return e?[e]:[]}}):(x.filter.ID=function(e){var t=e.replace(ne,f);return function(e){e=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return e&&e.value===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&E){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),x.find.TAG=h.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):h.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"!==e)return o;for(;n=o[i++];)1===n.nodeType&&r.push(n);return r},x.find.CLASS=h.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&E)return t.getElementsByClassName(e)},s=[],m=[],(h.qsa=Z.test(T.querySelectorAll))&&(ue(function(e){a.appendChild(e).innerHTML="<a id='"+N+"'></a><select id='"+N+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+B+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+B+"*(?:value|"+R+")"),e.querySelectorAll("[id~="+N+"-]").length||m.push("~="),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+N+"+*").length||m.push(".#.+[+~]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=T.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+B+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")})),(h.matchesSelector=Z.test(c=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ue(function(e){h.disconnectedMatch=c.call(e,"*"),c.call(e,"[s!='']:x"),s.push("!=",$)}),m=m.length&&new RegExp(m.join("|")),s=s.length&&new RegExp(s.join("|")),t=Z.test(a.compareDocumentPosition),y=t||Z.test(a.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,t=t&&t.parentNode;return e===t||!(!t||1!==t.nodeType||!(n.contains?n.contains(t):e.compareDocumentPosition&&16&e.compareDocumentPosition(t)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},j=t?function(e,t){if(e===t)return l=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!h.sortDetached&&t.compareDocumentPosition(e)===n?e===T||e.ownerDocument===b&&y(b,e)?-1:t===T||t.ownerDocument===b&&y(b,t)?1:u?I(u,e)-I(u,t):0:4&n?-1:1)}:function(e,t){if(e===t)return l=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e===T?-1:t===T?1:i?-1:o?1:u?I(u,e)-I(u,t):0;if(i===o)return ce(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?ce(a[r],s[r]):a[r]===b?-1:s[r]===b?1:0}),T},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==T&&C(e),t=t.replace(X,"='$1']"),h.matchesSelector&&E&&!L[t+" "]&&(!s||!s.test(t))&&(!m||!m.test(t)))try{var n=c.call(e,t);if(n||h.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){}return 0<oe(t,T,null,[e]).length},oe.contains=function(e,t){return(e.ownerDocument||e)!==T&&C(e),y(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==T&&C(e);var n=x.attrHandle[t.toLowerCase()],n=n&&q.call(x.attrHandle,t.toLowerCase())?n(e,t,!E):void 0;return void 0!==n?n:h.attributes||!E?e.getAttribute(t):(n=e.getAttributeNode(t))&&n.specified?n.value:null},oe.escape=function(e){return(e+"").replace(re,p)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,n=[],r=0,i=0;if(l=!h.detectDuplicates,u=!h.sortStable&&e.slice(0),e.sort(j),l){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return u=null,e},o=oe.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=o(t);return n},(x=oe.selectors={cacheLength:50,createPseudo:se,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ne,f),e[3]=(e[3]||e[4]||e[5]||"").replace(ne,f),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&Q.test(n)&&(t=g(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ne,f).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=D[e+" "];return t||(t=new RegExp("(^|"+B+")"+e+"("+B+"|$)"))&&D(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(t,n,r){return function(e){e=oe.attr(e,t);return null==e?"!="===n:!n||(e+="","="===n?e===r:"!="===n?e!==r:"^="===n?r&&0===e.indexOf(r):"*="===n?r&&-1<e.indexOf(r):"$="===n?r&&e.slice(-r.length)===r:"~="===n?-1<(" "+e.replace(z," ")+" ").indexOf(r):"|="===n&&(e===r||e.slice(0,r.length+1)===r+"-"))}},CHILD:function(h,e,t,g,v){var m="nth"!==h.slice(0,3),y="last"!==h.slice(-4),b="of-type"===e;return 1===g&&0===v?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,a,s,u,l=m!=y?"nextSibling":"previousSibling",c=e.parentNode,f=b&&e.nodeName.toLowerCase(),d=!n&&!b,p=!1;if(c){if(m){for(;l;){for(a=e;a=a[l];)if(b?a.nodeName.toLowerCase()===f:1===a.nodeType)return!1;u=l="only"===h&&!u&&"nextSibling"}return!0}if(u=[y?c.firstChild:c.lastChild],y&&d){for(p=(s=(r=(i=(o=(a=c)[N]||(a[N]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===A&&r[1])&&r[2],a=s&&c.childNodes[s];a=++s&&a&&a[l]||(p=s=0)||u.pop();)if(1===a.nodeType&&++p&&a===e){i[h]=[A,s,p];break}}else if(!1===(p=d?s=(r=(i=(o=(a=e)[N]||(a[N]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===A&&r[1]:p))for(;(a=++s&&a&&a[l]||(p=s=0)||u.pop())&&((b?a.nodeName.toLowerCase()!==f:1!==a.nodeType)||!++p||(d&&((i=(o=a[N]||(a[N]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]=[A,p]),a!==e)););return(p-=v)===g||p%g==0&&0<=p/g}}},PSEUDO:function(e,o){var t,a=x.pseudos[e]||x.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return a[N]?a(o):1<a.length?(t=[e,e,"",o],x.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,t){for(var n,r=a(e,o),i=r.length;i--;)e[n=I(e,r[i])]=!(t[n]=r[i])}):function(e){return a(e,0,t)}):a}},pseudos:{not:se(function(e){var r=[],i=[],s=d(e.replace(_,"$1"));return s[N]?se(function(e,t,n,r){for(var i,o=s(e,null,r,[]),a=e.length;a--;)(i=o[a])&&(e[a]=!(t[a]=i))}):function(e,t,n){return r[0]=e,s(r,null,n,i),r[0]=null,!i.pop()}}),has:se(function(t){return function(e){return 0<oe(t,e).length}}),contains:se(function(t){return t=t.replace(ne,f),function(e){return-1<(e.textContent||e.innerText||o(e)).indexOf(t)}}),lang:se(function(n){return Y.test(n||"")||oe.error("unsupported lang: "+n),n=n.replace(ne,f).toLowerCase(),function(e){var t;do{if(t=E?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===T.activeElement&&(!T.hasFocus||T.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:fe(!1),disabled:fe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return K.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(e=e.getAttribute("type"))||"text"===e.toLowerCase())},first:de(function(){return[0]}),last:de(function(e,t){return[t-1]}),eq:de(function(e,t,n){return[n<0?n+t:n]}),even:de(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:de(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:de(function(e,t,n){for(var r=n<0?n+t:n;0<=--r;)e.push(r);return e}),gt:de(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=x.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[e]=function(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}(e);for(e in{submit:!0,reset:!0})x.pseudos[e]=function(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}(e);function he(){}function ge(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ve(a,e,t){var s=e.dir,u=e.next,l=u||s,c=t&&"parentNode"===l,f=k++;return e.first?function(e,t,n){for(;e=e[s];)if(1===e.nodeType||c)return a(e,t,n);return!1}:function(e,t,n){var r,i,o=[A,f];if(n){for(;e=e[s];)if((1===e.nodeType||c)&&a(e,t,n))return!0}else for(;e=e[s];)if(1===e.nodeType||c)if(r=(i=e[N]||(e[N]={}))[e.uniqueID]||(i[e.uniqueID]={}),u&&u===e.nodeName.toLowerCase())e=e[s]||e;else{if((i=r[l])&&i[0]===A&&i[1]===f)return o[2]=i[2];if((r[l]=o)[2]=a(e,t,n))return!0}return!1}}function me(i){return 1<i.length?function(e,t,n){for(var r=i.length;r--;)if(!i[r](e,t,n))return!1;return!0}:i[0]}function ye(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function be(p,h,g,v,m,e){return v&&!v[N]&&(v=be(v)),m&&!m[N]&&(m=be(m,e)),se(function(e,t,n,r){var i,o,a,s=[],u=[],l=t.length,c=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)oe(e,t[r],n);return n}(h||"*",n.nodeType?[n]:n,[]),f=!p||!e&&h?c:ye(c,s,p,n,r),d=g?m||(e?p:l||v)?[]:t:f;if(g&&g(f,d,n,r),v)for(i=ye(d,u),v(i,[],n,r),o=i.length;o--;)(a=i[o])&&(d[u[o]]=!(f[u[o]]=a));if(e){if(m||p){if(m){for(i=[],o=d.length;o--;)(a=d[o])&&i.push(f[o]=a);m(null,d=[],i,r)}for(o=d.length;o--;)(a=d[o])&&-1<(i=m?I(e,a):s[o])&&(e[i]=!(t[i]=a))}}else d=ye(d===t?d.splice(l,d.length):d),m?m(null,t,d,r):H.apply(t,d)})}function xe(v,m){function e(e,t,n,r,i){var o,a,s,u=0,l="0",c=e&&[],f=[],d=w,p=e||b&&x.find.TAG("*",i),h=A+=null==d?1:Math.random()||.1,g=p.length;for(i&&(w=t===T||t||i);l!==g&&null!=(o=p[l]);l++){if(b&&o){for(a=0,t||o.ownerDocument===T||(C(o),n=!E);s=v[a++];)if(s(o,t||T,n)){r.push(o);break}i&&(A=h)}y&&((o=!s&&o)&&u--,e&&c.push(o))}if(u+=l,y&&l!==u){for(a=0;s=m[a++];)s(c,f,t,n);if(e){if(0<u)for(;l--;)c[l]||f[l]||(f[l]=O.call(r));f=ye(f)}H.apply(r,f),i&&!e&&0<f.length&&1<u+m.length&&oe.uniqueSort(r)}return i&&(A=h,w=d),c}var y=0<m.length,b=0<v.length;return y?se(e):e}return he.prototype=x.filters=x.pseudos,x.setFilters=new he,g=oe.tokenize=function(e,t){var n,r,i,o,a,s,u,l=S[e+" "];if(l)return t?0:l.slice(0);for(a=e,s=[],u=x.preFilter;a;){for(o in n&&!(r=U.exec(a))||(r&&(a=a.slice(r[0].length)||a),s.push(i=[])),n=!1,(r=V.exec(a))&&(n=r.shift(),i.push({value:n,type:r[0].replace(_," ")}),a=a.slice(n.length)),x.filter)!(r=G[o].exec(a))||u[o]&&!(r=u[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?oe.error(e):S(e,s).slice(0)},d=oe.compile=function(e,t){var n,r=[],i=[],o=L[e+" "];if(!o){for(n=(t=t||g(e)).length;n--;)((o=function e(t){for(var r,n,i,o=t.length,a=x.relative[t[0].type],s=a||x.relative[" "],u=a?1:0,l=ve(function(e){return e===r},s,!0),c=ve(function(e){return-1<I(r,e)},s,!0),f=[function(e,t,n){return n=!a&&(n||t!==w)||((r=t).nodeType?l:c)(e,t,n),r=null,n}];u<o;u++)if(n=x.relative[t[u].type])f=[ve(me(f),n)];else{if((n=x.filter[t[u].type].apply(null,t[u].matches))[N]){for(i=++u;i<o&&!x.relative[t[i].type];i++);return be(1<u&&me(f),1<u&&ge(t.slice(0,u-1).concat({value:" "===t[u-2].type?"*":""})).replace(_,"$1"),n,u<i&&e(t.slice(u,i)),i<o&&e(t=t.slice(i)),i<o&&ge(t))}f.push(n)}return me(f)}(t[n]))[N]?r:i).push(o);(o=L(e,xe(i,r))).selector=e}return o},v=oe.select=function(e,t,n,r){var i,o,a,s,u,l="function"==typeof e&&e,c=!r&&g(e=l.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&"ID"===(a=o[0]).type&&9===t.nodeType&&E&&x.relative[o[1].type]){if(!(t=(x.find.ID(a.matches[0].replace(ne,f),t)||[])[0]))return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=G.needsContext.test(e)?0:o.length;i--&&(a=o[i],!x.relative[s=a.type]);)if((u=x.find[s])&&(r=u(a.matches[0].replace(ne,f),te.test(o[0].type)&&pe(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&ge(o)))return H.apply(n,r),n;break}}return(l||d(e,c))(r,t,!E,n,!t||te.test(e)&&pe(t.parentNode)||t),n},h.sortStable=N.split("").sort(j).join("")===N,h.detectDuplicates=!!l,C(),h.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(T.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||le("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),h.attributes&&ue(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||le("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||le(R,function(e,t,n){if(!n)return!0===e[t]?t.toLowerCase():(t=e.getAttributeNode(t))&&t.specified?t.value:null}),oe}(h);x.find=T,x.expr=T.selectors,x.expr[":"]=x.expr.pseudos,x.uniqueSort=x.unique=T.uniqueSort,x.text=T.getText,x.isXMLDoc=T.isXML,x.contains=T.contains,x.escapeSelector=T.escape;function E(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&x(e).is(n))break;r.push(e)}return r}function N(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}var A=x.expr.match.needsContext;function k(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,S=/^.[^:#\[\.,]*$/;function L(e,n,r){return x.isFunction(n)?x.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?x.grep(e,function(e){return e===n!==r}):"string"!=typeof n?x.grep(e,function(e){return-1<i.call(n,e)!==r}):S.test(n)?x.filter(n,e,r):(n=x.filter(n,e),x.grep(e,function(e){return-1<i.call(n,e)!==r&&1===e.nodeType}))}x.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?x.find.matchesSelector(r,e)?[r]:[]:x.find.matches(e,x.grep(t,function(e){return 1===e.nodeType}))},x.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(x(e).filter(function(){for(t=0;t<r;t++)if(x.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)x.find(e,i[t],n);return 1<r?x.uniqueSort(n):n},filter:function(e){return this.pushStack(L(this,e||[],!1))},not:function(e){return this.pushStack(L(this,e||[],!0))},is:function(e){return!!L(this,"string"==typeof e&&A.test(e)?x(e):e||[],!1).length}});var j=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(x.fn.init=function(e,t,n){if(!e)return this;if(n=n||q,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):x.isFunction(e)?void 0!==n.ready?n.ready(e):e(x):x.makeArray(e,this);if(!(r="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:j.exec(e))||!r[1]&&t)return(!t||t.jquery?t||n:this.constructor(t)).find(e);if(r[1]){if(t=t instanceof x?t[0]:t,x.merge(this,x.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:g,!0)),D.test(r[1])&&x.isPlainObject(t))for(var r in t)x.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(e=g.getElementById(r[2]))&&(this[0]=e,this.length=1),this}).prototype=x.fn;var q=x(g),O=/^(?:parents|prev(?:Until|All))/,F={children:!0,contents:!0,next:!0,prev:!0};function H(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}x.fn.extend({has:function(e){var t=x(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(x.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&x(e);if(!A.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&x.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?x.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?i.call(x(e),this[0]):i.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(x.uniqueSort(x.merge(this.get(),x(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),x.each({parent:function(e){e=e.parentNode;return e&&11!==e.nodeType?e:null},parents:function(e){return E(e,"parentNode")},parentsUntil:function(e,t,n){return E(e,"parentNode",n)},next:function(e){return H(e,"nextSibling")},prev:function(e){return H(e,"previousSibling")},nextAll:function(e){return E(e,"nextSibling")},prevAll:function(e){return E(e,"previousSibling")},nextUntil:function(e,t,n){return E(e,"nextSibling",n)},prevUntil:function(e,t,n){return E(e,"previousSibling",n)},siblings:function(e){return N((e.parentNode||{}).firstChild,e)},children:function(e){return N(e.firstChild)},contents:function(e){return k(e,"iframe")?e.contentDocument:(k(e,"template")&&(e=e.content||e),x.merge([],e.childNodes))}},function(r,i){x.fn[r]=function(e,t){var n=x.map(this,i,e);return(t="Until"!==r.slice(-5)?e:t)&&"string"==typeof t&&(n=x.filter(t,n)),1<this.length&&(F[r]||x.uniqueSort(n),O.test(r)&&n.reverse()),this.pushStack(n)}});var P=/[^\x20\t\r\n\f]+/g;function I(e){return e}function R(e){throw e}function B(e,t,n,r){var i;try{e&&x.isFunction(i=e.promise)?i.call(e).done(t).fail(n):e&&x.isFunction(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}x.Callbacks=function(r){var e,n;r="string"==typeof r?(e=r,n={},x.each(e.match(P)||[],function(e,t){n[t]=!0}),n):x.extend({},r);function i(){for(s=s||r.once,a=o=!0;l.length;c=-1)for(t=l.shift();++c<u.length;)!1===u[c].apply(t[0],t[1])&&r.stopOnFalse&&(c=u.length,t=!1);r.memory||(t=!1),o=!1,s&&(u=t?[]:"")}var o,t,a,s,u=[],l=[],c=-1,f={add:function(){return u&&(t&&!o&&(c=u.length-1,l.push(t)),function n(e){x.each(e,function(e,t){x.isFunction(t)?r.unique&&f.has(t)||u.push(t):t&&t.length&&"string"!==x.type(t)&&n(t)})}(arguments),t&&!o&&i()),this},remove:function(){return x.each(arguments,function(e,t){for(var n;-1<(n=x.inArray(t,u,n));)u.splice(n,1),n<=c&&c--}),this},has:function(e){return e?-1<x.inArray(e,u):0<u.length},empty:function(){return u=u&&[],this},disable:function(){return s=l=[],u=t="",this},disabled:function(){return!u},lock:function(){return s=l=[],t||o||(u=t=""),this},locked:function(){return!!s},fireWith:function(e,t){return s||(t=[e,(t=t||[]).slice?t.slice():t],l.push(t),o||i()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!a}};return f},x.extend({Deferred:function(e){var o=[["notify","progress",x.Callbacks("memory"),x.Callbacks("memory"),2],["resolve","done",x.Callbacks("once memory"),x.Callbacks("once memory"),0,"resolved"],["reject","fail",x.Callbacks("once memory"),x.Callbacks("once memory"),1,"rejected"]],i="pending",a={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},catch:function(e){return a.then(null,e)},pipe:function(){var i=arguments;return x.Deferred(function(r){x.each(o,function(e,t){var n=x.isFunction(i[t[4]])&&i[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&x.isFunction(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+"With"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var u=0;function l(i,o,a,s){return function(){function e(){var e,t;if(!(i<u)){if((e=a.apply(n,r))===o.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,x.isFunction(t)?s?t.call(e,l(u,o,I,s),l(u,o,R,s)):(u++,t.call(e,l(u,o,I,s),l(u,o,R,s),l(u,o,I,o.notifyWith))):(a!==I&&(n=void 0,r=[e]),(s||o.resolveWith)(n,r))}}var n=this,r=arguments,t=s?e:function(){try{e()}catch(e){x.Deferred.exceptionHook&&x.Deferred.exceptionHook(e,t.stackTrace),u<=i+1&&(a!==R&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(x.Deferred.getStackHook&&(t.stackTrace=x.Deferred.getStackHook()),h.setTimeout(t))}}return x.Deferred(function(e){o[0][3].add(l(0,e,x.isFunction(r)?r:I,e.notifyWith)),o[1][3].add(l(0,e,x.isFunction(t)?t:I)),o[2][3].add(l(0,e,x.isFunction(n)?n:R))}).promise()},promise:function(e){return null!=e?x.extend(e,a):a}},s={};return x.each(o,function(e,t){var n=t[2],r=t[5];a[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[0][2].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?void 0:this,arguments),this},s[t[0]+"With"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){function t(t){return function(e){i[t]=this,o[t]=1<arguments.length?s.call(arguments):e,--n||a.resolveWith(i,o)}}var n=arguments.length,r=n,i=Array(r),o=s.call(arguments),a=x.Deferred();if(n<=1&&(B(e,a.done(t(r)).resolve,a.reject,!n),"pending"===a.state()||x.isFunction(o[r]&&o[r].then)))return a.then();for(;r--;)B(o[r],t(r),a.reject);return a.promise()}});var W=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;x.Deferred.exceptionHook=function(e,t){h.console&&h.console.warn&&e&&W.test(e.name)&&h.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},x.readyException=function(e){h.setTimeout(function(){throw e})};var M=x.Deferred();function $(){g.removeEventListener("DOMContentLoaded",$),h.removeEventListener("load",$),x.ready()}x.fn.ready=function(e){return M.then(e).catch(function(e){x.readyException(e)}),this},x.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--x.readyWait:x.isReady)||((x.isReady=!0)!==e&&0<--x.readyWait||M.resolveWith(g,[x]))}}),x.ready.then=M.then,"complete"===g.readyState||"loading"!==g.readyState&&!g.documentElement.doScroll?h.setTimeout(x.ready):(g.addEventListener("DOMContentLoaded",$),h.addEventListener("load",$));function z(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if("object"===x.type(n))for(s in i=!0,n)z(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,x.isFunction(r)||(a=!0),t=l?a?(t.call(e,r),null):(l=t,function(e,t,n){return l.call(x(e),n)}):t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o}function _(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function U(){this.expando=x.expando+U.uid++}U.uid=1,U.prototype={cache:function(e){var t=e[this.expando];return t||(t={},_(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[x.camelCase(t)]=n;else for(r in t)i[x.camelCase(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][x.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(x.camelCase):(t=x.camelCase(t))in r?[t]:t.match(P)||[]).length;for(;n--;)delete r[t[n]]}void 0!==t&&!x.isEmptyObject(r)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){e=e[this.expando];return void 0!==e&&!x.isEmptyObject(e)}};var V=new U,X=new U,Q=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Y=/[A-Z]/g;function G(e,t,n){var r,i;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Y,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n="true"===(i=n)||"false"!==i&&("null"===i?null:i===+i+""?+i:Q.test(i)?JSON.parse(i):i)}catch(e){}X.set(e,t,n)}else n=void 0;return n}x.extend({hasData:function(e){return X.hasData(e)||V.hasData(e)},data:function(e,t,n){return X.access(e,t,n)},removeData:function(e,t){X.remove(e,t)},_data:function(e,t,n){return V.access(e,t,n)},_removeData:function(e,t){V.remove(e,t)}}),x.fn.extend({data:function(n,e){var t,r,i,o=this[0],a=o&&o.attributes;if(void 0!==n)return"object"==typeof n?this.each(function(){X.set(this,n)}):z(this,function(e){var t;return o&&void 0===e?void 0!==(t=X.get(o,n))||void 0!==(t=G(o,n))?t:void 0:void this.each(function(){X.set(this,n,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(i=X.get(o),1===o.nodeType&&!V.get(o,"hasDataAttrs"))){for(t=a.length;t--;)a[t]&&(0===(r=a[t].name).indexOf("data-")&&(r=x.camelCase(r.slice(5)),G(o,r,i[r])));V.set(o,"hasDataAttrs",!0)}return i},removeData:function(e){return this.each(function(){X.remove(this,e)})}}),x.extend({queue:function(e,t,n){var r;if(e)return r=V.get(e,t=(t||"fx")+"queue"),n&&(!r||Array.isArray(n)?r=V.access(e,t,x.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=x.queue(e,t),r=n.length,i=n.shift(),o=x._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){x.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return V.get(e,n)||V.access(e,n,{empty:x.Callbacks("once memory").add(function(){V.remove(e,[t+"queue",n])})})}}),x.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?x.queue(this[0],t):void 0===n?this:this.each(function(){var e=x.queue(this,t,n);x._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&x.dequeue(this,t)})},dequeue:function(e){return this.each(function(){x.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function n(){--i||o.resolveWith(a,[a])}var r,i=1,o=x.Deferred(),a=this,s=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(r=V.get(a[s],e+"queueHooks"))&&r.empty&&(i++,r.empty.add(n));return n(),o.promise(t)}});function K(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&x.contains(e.ownerDocument,e)&&"none"===x.css(e,"display")}function J(e,t,n,r){var i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in r=n.apply(e,r||[]),t)e.style[i]=o[i];return r}var f=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Z=new RegExp("^(?:([+-])=|)("+f+")([a-z%]*)$","i"),ee=["Top","Right","Bottom","Left"];var te={};function ne(e,t){for(var n,r,i,o,a,s=[],u=0,l=e.length;u<l;u++)(r=e[u]).style&&(n=r.style.display,t?("none"===n&&(s[u]=V.get(r,"display")||null,s[u]||(r.style.display="")),""===r.style.display&&K(r)&&(s[u]=(a=o=void 0,o=(i=r).ownerDocument,a=i.nodeName,(i=te[a])||(o=o.body.appendChild(o.createElement(a)),i=x.css(o,"display"),o.parentNode.removeChild(o),te[a]=i="none"===i?"block":i)))):"none"!==n&&(s[u]="none",V.set(r,"display",n)));for(u=0;u<l;u++)null!=s[u]&&(e[u].style.display=s[u]);return e}x.fn.extend({show:function(){return ne(this,!0)},hide:function(){return ne(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){K(this)?x(this).show():x(this).hide()})}});var re=/^(?:checkbox|radio)$/i,ie=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,oe=/^$|\/(?:java|ecma)script/i,ae={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function se(e,t){var n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&k(e,t)?x.merge([e],n):n}function ue(e,t){for(var n=0,r=e.length;n<r;n++)V.set(e[n],"globalEval",!t||V.get(t[n],"globalEval"))}ae.optgroup=ae.option,ae.tbody=ae.tfoot=ae.colgroup=ae.caption=ae.thead,ae.th=ae.td;var le=/<|&#?\w+;/;function ce(e,t,n,r,i){for(var o,a,s,u,l,c=t.createDocumentFragment(),f=[],d=0,p=e.length;d<p;d++)if((o=e[d])||0===o)if("object"===x.type(o))x.merge(f,o.nodeType?[o]:o);else if(le.test(o)){for(a=a||c.appendChild(t.createElement("div")),s=(ie.exec(o)||["",""])[1].toLowerCase(),s=ae[s]||ae._default,a.innerHTML=s[1]+x.htmlPrefilter(o)+s[2],l=s[0];l--;)a=a.lastChild;x.merge(f,a.childNodes),(a=c.firstChild).textContent=""}else f.push(t.createTextNode(o));for(c.textContent="",d=0;o=f[d++];)if(r&&-1<x.inArray(o,r))i&&i.push(o);else if(u=x.contains(o.ownerDocument,o),a=se(c.appendChild(o),"script"),u&&ue(a),n)for(l=0;o=a[l++];)oe.test(o.type||"")&&n.push(o);return c}t=g.createDocumentFragment().appendChild(g.createElement("div")),(T=g.createElement("input")).setAttribute("type","radio"),T.setAttribute("checked","checked"),T.setAttribute("name","t"),t.appendChild(T),y.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue;var fe=g.documentElement,de=/^key/,pe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,he=/^([^.]*)(?:\.(.+)|)/;function ge(){return!0}function ve(){return!1}function me(){try{return g.activeElement}catch(e){}}function ye(e,t,n,r,i,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)ye(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=ve;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return x().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=x.guid++)),e.each(function(){x.event.add(this,t,i,r,n)})}x.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,l,c,f,d,p,h=V.get(t);if(h)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&x.find.matchesSelector(fe,i),n.guid||(n.guid=x.guid++),(s=h.events)||(s=h.events={}),(a=h.handle)||(a=h.handle=function(e){return void 0!==x&&x.event.triggered!==e.type?x.event.dispatch.apply(t,arguments):void 0}),u=(e=(e||"").match(P)||[""]).length;u--;)f=p=(l=he.exec(e[u])||[])[1],d=(l[2]||"").split(".").sort(),f&&(c=x.event.special[f]||{},f=(i?c.delegateType:c.bindType)||f,c=x.event.special[f]||{},l=x.extend({type:f,origType:p,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&x.expr.match.needsContext.test(i),namespace:d.join(".")},o),(p=s[f])||((p=s[f]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(t,r,d,a)||t.addEventListener&&t.addEventListener(f,a)),c.add&&(c.add.call(t,l),l.handler.guid||(l.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,l):p.push(l),x.event.global[f]=!0)},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,d,p,h,g,v=V.hasData(e)&&V.get(e);if(v&&(u=v.events)){for(l=(t=(t||"").match(P)||[""]).length;l--;)if(p=g=(s=he.exec(t[l])||[])[1],h=(s[2]||"").split(".").sort(),p){for(f=x.event.special[p]||{},d=u[p=(r?f.delegateType:f.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=d.length;o--;)c=d[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(d.splice(o,1),c.selector&&d.delegateCount--,f.remove&&f.remove.call(e,c));a&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,h,v.handle)||x.removeEvent(e,p,v.handle),delete u[p])}else for(p in u)x.event.remove(e,p+t[l],n,r,!0);x.isEmptyObject(u)&&V.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a=x.event.fix(e),s=new Array(arguments.length),u=(V.get(this,"events")||{})[a.type]||[],e=x.event.special[a.type]||{};for(s[0]=a,t=1;t<arguments.length;t++)s[t]=arguments[t];if(a.delegateTarget=this,!e.preDispatch||!1!==e.preDispatch.call(this,a)){for(o=x.event.handlers.call(this,a,u),t=0;(r=o[t++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,n=0;(i=r.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(i.namespace)||(a.handleObj=i,a.data=i.data,void 0!==(i=((x.event.special[i.origType]||{}).handle||i.handler).apply(r.elem,s))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return e.postDispatch&&e.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&1<=e.button))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?-1<x(i,this).index(l):x.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(t,e){Object.defineProperty(x.Event.prototype,t,{enumerable:!0,configurable:!0,get:x.isFunction(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[x.expando]?e:new x.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==me()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===me()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&k(this,"input"))return this.click(),!1},_default:function(e){return k(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},x.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},x.Event=function(e,t){return this instanceof x.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?ge:ve,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&x.extend(this,t),this.timeStamp=e&&e.timeStamp||x.now(),void(this[x.expando]=!0)):new x.Event(e,t)},x.Event.prototype={constructor:x.Event,isDefaultPrevented:ve,isPropagationStopped:ve,isImmediatePropagationStopped:ve,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ge,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ge,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ge,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},x.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&de.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&pe.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},x.event.addProp),x.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,i){x.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||x.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),x.fn.extend({on:function(e,t,n,r){return ye(this,e,t,n,r)},one:function(e,t,n,r){return ye(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,x(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ve),this.each(function(){x.event.remove(this,e,n,t)});for(i in e)this.off(i,t,e[i]);return this}});var be=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,xe=/<script|<style|<link/i,we=/checked\s*(?:[^=]|=\s*.checked.)/i,Ce=/^true\/(.*)/,Te=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ee(e,t){return k(e,"table")&&k(11!==t.nodeType?t:t.firstChild,"tr")&&x(">tbody",e)[0]||e}function Ne(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Ae(e){var t=Ce.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function ke(e,t){var n,r,i,o,a,s;if(1===t.nodeType){if(V.hasData(e)&&(o=V.access(e),a=V.set(t,o),s=o.events))for(i in delete a.handle,a.events={},s)for(n=0,r=s[i].length;n<r;n++)x.event.add(t,i,s[i][n]);X.hasData(e)&&(e=X.access(e),e=x.extend({},e),X.set(t,e))}}function De(n,r,i,o){r=v.apply([],r);var e,t,a,s,u,l,c=0,f=n.length,d=f-1,p=r[0],h=x.isFunction(p);if(h||1<f&&"string"==typeof p&&!y.checkClone&&we.test(p))return n.each(function(e){var t=n.eq(e);h&&(r[0]=p.call(this,e,t.html())),De(t,r,i,o)});if(f&&(t=(e=ce(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(s=(a=x.map(se(e,"script"),Ne)).length;c<f;c++)u=e,c!==d&&(u=x.clone(u,!0,!0),s&&x.merge(a,se(u,"script"))),i.call(n[c],u,c);if(s)for(l=a[a.length-1].ownerDocument,x.map(a,Ae),c=0;c<s;c++)u=a[c],oe.test(u.type||"")&&!V.access(u,"globalEval")&&x.contains(l,u)&&(u.src?x._evalUrl&&x._evalUrl(u.src):b(u.textContent.replace(Te,""),l))}return n}function Se(e,t,n){for(var r,i=t?x.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||x.cleanData(se(r)),r.parentNode&&(n&&x.contains(r.ownerDocument,r)&&ue(se(r,"script")),r.parentNode.removeChild(r));return e}x.extend({htmlPrefilter:function(e){return e.replace(be,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,s,u,l,c=e.cloneNode(!0),f=x.contains(e.ownerDocument,e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||x.isXMLDoc(e)))for(a=se(c),r=0,i=(o=se(e)).length;r<i;r++)s=o[r],u=a[r],l=void 0,"input"===(l=u.nodeName.toLowerCase())&&re.test(s.type)?u.checked=s.checked:"input"!==l&&"textarea"!==l||(u.defaultValue=s.defaultValue);if(t)if(n)for(o=o||se(e),a=a||se(c),r=0,i=o.length;r<i;r++)ke(o[r],a[r]);else ke(e,c);return 0<(a=se(c,"script")).length&&ue(a,!f&&se(e,"script")),c},cleanData:function(e){for(var t,n,r,i=x.event.special,o=0;void 0!==(n=e[o]);o++)if(_(n)){if(t=n[V.expando]){if(t.events)for(r in t.events)i[r]?x.event.remove(n,r):x.removeEvent(n,r,t.handle);n[V.expando]=void 0}n[X.expando]&&(n[X.expando]=void 0)}}}),x.fn.extend({detach:function(e){return Se(this,e,!0)},remove:function(e){return Se(this,e)},text:function(e){return z(this,function(e){return void 0===e?x.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return De(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ee(this,e).appendChild(e)})},prepend:function(){return De(this,arguments,function(e){var t;1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(t=Ee(this,e)).insertBefore(e,t.firstChild)})},before:function(){return De(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return De(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(x.cleanData(se(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return x.clone(this,e,t)})},html:function(e){return z(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!xe.test(e)&&!ae[(ie.exec(e)||["",""])[1].toLowerCase()]){e=x.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(x.cleanData(se(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return De(this,arguments,function(e){var t=this.parentNode;x.inArray(this,n)<0&&(x.cleanData(se(this)),t&&t.replaceChild(e,this))},n)}}),x.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,a){x.fn[e]=function(e){for(var t,n=[],r=x(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),x(r[o])[a](t),u.apply(n,t.get());return this.pushStack(n)}});function Le(e){var t=e.ownerDocument.defaultView;return(t=!t||!t.opener?h:t).getComputedStyle(e)}var je,qe,Oe,Fe,He,Pe,Ie=/^margin/,Re=new RegExp("^("+f+")(?!px)[a-z%]+$","i");function Be(){var e;Pe&&(Pe.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",Pe.innerHTML="",fe.appendChild(He),e=h.getComputedStyle(Pe),je="1%"!==e.top,Fe="2px"===e.marginLeft,qe="4px"===e.width,Pe.style.marginRight="50%",Oe="4px"===e.marginRight,fe.removeChild(He),Pe=null)}function We(e,t,n){var r,i,o=e.style;return(n=n||Le(e))&&(""!==(i=n.getPropertyValue(t)||n[t])||x.contains(e.ownerDocument,e)||(i=x.style(e,t)),!y.pixelMarginRight()&&Re.test(i)&&Ie.test(t)&&(r=o.width,e=o.minWidth,t=o.maxWidth,o.minWidth=o.maxWidth=o.width=i,i=n.width,o.width=r,o.minWidth=e,o.maxWidth=t)),void 0!==i?i+"":i}function Me(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}He=g.createElement("div"),(Pe=g.createElement("div")).style&&(Pe.style.backgroundClip="content-box",Pe.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===Pe.style.backgroundClip,He.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",He.appendChild(Pe),x.extend(y,{pixelPosition:function(){return Be(),je},boxSizingReliable:function(){return Be(),qe},pixelMarginRight:function(){return Be(),Oe},reliableMarginLeft:function(){return Be(),Fe}}));var $e=/^(none|table(?!-c[ea]).+)/,ze=/^--/,_e={position:"absolute",visibility:"hidden",display:"block"},Ue={letterSpacing:"0",fontWeight:"400"},Ve=["Webkit","Moz","ms"],Xe=g.createElement("div").style;function Qe(e){return x.cssProps[e]||(x.cssProps[e]=function(e){if(e in Xe)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Ve.length;n--;)if((e=Ve[n]+t)in Xe)return e}(e)||e)}function Ye(e,t,n){var r=Z.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function Ge(e,t,n,r,i){for(var o=0,a=n===(r?"border":"content")?4:"width"===t?1:0;a<4;a+=2)"margin"===n&&(o+=x.css(e,n+ee[a],!0,i)),r?("content"===n&&(o-=x.css(e,"padding"+ee[a],!0,i)),"margin"!==n&&(o-=x.css(e,"border"+ee[a]+"Width",!0,i))):(o+=x.css(e,"padding"+ee[a],!0,i),"padding"!==n&&(o+=x.css(e,"border"+ee[a]+"Width",!0,i)));return o}function Ke(e,t,n){var r,i=Le(e),o=We(e,t,i),a="border-box"===x.css(e,"boxSizing",!1,i);return Re.test(o)?o:(r=a&&(y.boxSizingReliable()||o===e.style[t]),"auto"===o&&(o=e["offset"+t[0].toUpperCase()+t.slice(1)]),(o=parseFloat(o)||0)+Ge(e,t,n||(a?"border":"content"),r,i)+"px")}x.extend({cssHooks:{opacity:{get:function(e,t){if(t){e=We(e,"opacity");return""===e?"1":e}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=x.camelCase(t),u=ze.test(t),l=e.style;return u||(t=Qe(s)),a=x.cssHooks[t]||x.cssHooks[s],void 0===n?a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t]:("string"===(o=typeof n)&&(i=Z.exec(n))&&i[1]&&(n=function(e,t,n,r){var i,o=1,a=20,s=r?function(){return r.cur()}:function(){return x.css(e,t,"")},u=s(),l=n&&n[3]||(x.cssNumber[t]?"":"px"),c=(x.cssNumber[t]||"px"!==l&&+u)&&Z.exec(x.css(e,t));if(c&&c[3]!==l)for(l=l||c[3],n=n||[],c=+u||1;x.style(e,t,(c/=o=o||".5")+l),o!==(o=s()/u)&&1!==o&&--a;);return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}(e,t,i),o="number"),void(null!=n&&n==n&&("number"===o&&(n+=i&&i[3]||(x.cssNumber[s]?"":"px")),y.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))))}},css:function(e,t,n,r){var i,o=x.camelCase(t);return ze.test(t)||(t=Qe(o)),"normal"===(i=void 0===(i=(o=x.cssHooks[t]||x.cssHooks[o])&&"get"in o?o.get(e,!0,n):i)?We(e,t,r):i)&&t in Ue&&(i=Ue[t]),""===n||n?(t=parseFloat(i),!0===n||isFinite(t)?t||0:i):i}}),x.each(["height","width"],function(e,o){x.cssHooks[o]={get:function(e,t,n){if(t)return!$e.test(x.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?Ke(e,o,n):J(e,_e,function(){return Ke(e,o,n)})},set:function(e,t,n){var r,i=n&&Le(e),i=n&&Ge(e,o,n,"border-box"===x.css(e,"boxSizing",!1,i),i);return i&&(r=Z.exec(t))&&"px"!==(r[3]||"px")&&(e.style[o]=t,t=x.css(e,o)),Ye(0,t,i)}}}),x.cssHooks.marginLeft=Me(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(We(e,"marginLeft"))||e.getBoundingClientRect().left-J(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),x.each({margin:"",padding:"",border:"Width"},function(i,o){x.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r="string"==typeof e?e.split(" "):[e];t<4;t++)n[i+ee[t]+o]=r[t]||r[t-2]||r[0];return n}},Ie.test(i)||(x.cssHooks[i+o].set=Ye)}),x.fn.extend({css:function(e,t){return z(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Le(e),i=t.length;a<i;a++)o[t[a]]=x.css(e,t[a],!1,r);return o}return void 0!==n?x.style(e,t,n):x.css(e,t)},e,t,1<arguments.length)}}),x.fn.delay=function(r,e){return r=x.fx&&x.fx.speeds[r]||r,this.queue(e=e||"fx",function(e,t){var n=h.setTimeout(e,r);t.stop=function(){h.clearTimeout(n)}})},t=g.createElement("input"),f=g.createElement("select").appendChild(g.createElement("option")),t.type="checkbox",y.checkOn=""!==t.value,y.optSelected=f.selected,(t=g.createElement("input")).value="t",t.type="radio",y.radioValue="t"===t.value;var Je,Ze=x.expr.attrHandle;x.fn.extend({attr:function(e,t){return z(this,x.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){x.removeAttr(this,e)})}}),x.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?x.prop(e,t,n):(1===o&&x.isXMLDoc(e)||(i=x.attrHooks[t.toLowerCase()]||(x.expr.match.bool.test(t)?Je:void 0)),void 0!==n?null===n?void x.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=x.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&k(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(P);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),Je={set:function(e,t,n){return!1===t?x.removeAttr(e,n):e.setAttribute(n,n),n}},x.each(x.expr.match.bool.source.match(/\w+/g),function(e,t){var a=Ze[t]||x.find.attr;Ze[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=Ze[o],Ze[o]=r,r=null!=a(e,t,n)?o:null,Ze[o]=i),r}});var et=/^(?:input|select|textarea|button)$/i,tt=/^(?:a|area)$/i;function nt(e){return(e.match(P)||[]).join(" ")}function rt(e){return e.getAttribute&&e.getAttribute("class")||""}x.fn.extend({prop:function(e,t){return z(this,x.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[x.propFix[e]||e]})}}),x.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&x.isXMLDoc(e)||(t=x.propFix[t]||t,i=x.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=x.find.attr(e,"tabindex");return t?parseInt(t,10):et.test(e.nodeName)||tt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(x.propHooks.selected={get:function(e){e=e.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(e){e=e.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),x.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){x.propFix[this.toLowerCase()]=this}),x.fn.extend({addClass:function(t){var e,n,r,i,o,a,s=0;if(x.isFunction(t))return this.each(function(e){x(this).addClass(t.call(this,e,rt(this)))});if("string"==typeof t&&t)for(e=t.match(P)||[];n=this[s++];)if(a=rt(n),r=1===n.nodeType&&" "+nt(a)+" "){for(o=0;i=e[o++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");a!==(a=nt(r))&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,r,i,o,a,s=0;if(x.isFunction(t))return this.each(function(e){x(this).removeClass(t.call(this,e,rt(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(P)||[];n=this[s++];)if(a=rt(n),r=1===n.nodeType&&" "+nt(a)+" "){for(o=0;i=e[o++];)for(;-1<r.indexOf(" "+i+" ");)r=r.replace(" "+i+" "," ");a!==(a=nt(r))&&n.setAttribute("class",a)}return this},toggleClass:function(i,t){var o=typeof i;return"boolean"==typeof t&&"string"==o?t?this.addClass(i):this.removeClass(i):x.isFunction(i)?this.each(function(e){x(this).toggleClass(i.call(this,e,rt(this),t),t)}):this.each(function(){var e,t,n,r;if("string"==o)for(t=0,n=x(this),r=i.match(P)||[];e=r[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==i&&"boolean"!=o||((e=rt(this))&&V.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",!e&&!1!==i&&V.get(this,"__className__")||""))})},hasClass:function(e){for(var t,n=0,r=" "+e+" ";t=this[n++];)if(1===t.nodeType&&-1<(" "+nt(rt(t))+" ").indexOf(r))return!0;return!1}});var it=/\r/g;x.fn.extend({val:function(t){var n,e,r,i=this[0];return arguments.length?(r=x.isFunction(t),this.each(function(e){1===this.nodeType&&(null==(e=r?t.call(this,e,x(this).val()):t)?e="":"number"==typeof e?e+="":Array.isArray(e)&&(e=x.map(e,function(e){return null==e?"":e+""})),(n=x.valHooks[this.type]||x.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,e,"value")||(this.value=e))})):i?(n=x.valHooks[i.type]||x.valHooks[i.nodeName.toLowerCase()])&&"get"in n&&void 0!==(e=n.get(i,"value"))?e:"string"==typeof(e=i.value)?e.replace(it,""):null==e?"":e:void 0}}),x.extend({valHooks:{option:{get:function(e){var t=x.find.attr(e,"value");return null!=t?t:nt(x.text(e))}},select:{get:function(e){for(var t,n=e.options,r=e.selectedIndex,i="select-one"===e.type,o=i?null:[],a=i?r+1:n.length,s=r<0?a:i?r:0;s<a;s++)if(((t=n[s]).selected||s===r)&&!t.disabled&&(!t.parentNode.disabled||!k(t.parentNode,"optgroup"))){if(t=x(t).val(),i)return t;o.push(t)}return o},set:function(e,t){for(var n,r,i=e.options,o=x.makeArray(t),a=i.length;a--;)((r=i[a]).selected=-1<x.inArray(x.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),x.each(["radio","checkbox"],function(){x.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<x.inArray(x(e).val(),t)}},y.checkOn||(x.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var ot=/^(?:focusinfocus|focusoutblur)$/;x.extend(x.event,{trigger:function(e,t,n,r){var i,o,a,s,u,l,c=[n||g],f=m.call(e,"type")?e.type:e,d=m.call(e,"namespace")?e.namespace.split("."):[],p=o=n=n||g;if(3!==n.nodeType&&8!==n.nodeType&&!ot.test(f+x.event.triggered)&&(-1<f.indexOf(".")&&(f=(d=f.split(".")).shift(),d.sort()),s=f.indexOf(":")<0&&"on"+f,(e=e[x.expando]?e:new x.Event(f,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=d.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:x.makeArray(t,[e]),l=x.event.special[f]||{},r||!l.trigger||!1!==l.trigger.apply(n,t))){if(!r&&!l.noBubble&&!x.isWindow(n)){for(a=l.delegateType||f,ot.test(a+f)||(p=p.parentNode);p;p=p.parentNode)c.push(p),o=p;o===(n.ownerDocument||g)&&c.push(o.defaultView||o.parentWindow||h)}for(i=0;(p=c[i++])&&!e.isPropagationStopped();)e.type=1<i?a:l.bindType||f,(u=(V.get(p,"events")||{})[e.type]&&V.get(p,"handle"))&&u.apply(p,t),(u=s&&p[s])&&u.apply&&_(p)&&(e.result=u.apply(p,t),!1===e.result&&e.preventDefault());return e.type=f,r||e.isDefaultPrevented()||l._default&&!1!==l._default.apply(c.pop(),t)||!_(n)||s&&x.isFunction(n[f])&&!x.isWindow(n)&&((o=n[s])&&(n[s]=null),n[x.event.triggered=f](),x.event.triggered=void 0,o&&(n[s]=o)),e.result}},simulate:function(e,t,n){e=x.extend(new x.Event,n,{type:e,isSimulated:!0});x.event.trigger(e,null,t)}}),x.fn.extend({trigger:function(e,t){return this.each(function(){x.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return x.event.trigger(e,t,n,!0)}}),x.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){x.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}}),x.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),y.focusin="onfocusin"in h,y.focusin||x.each({focus:"focusin",blur:"focusout"},function(n,r){function i(e){x.event.simulate(r,e.target,x.event.fix(e))}x.event.special[r]={setup:function(){var e=this.ownerDocument||this,t=V.access(e,r);t||e.addEventListener(n,i,!0),V.access(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this,t=V.access(e,r)-1;t?V.access(e,r,t):(e.removeEventListener(n,i,!0),V.remove(e,r))}}});var at=/\[\]$/,st=/\r?\n/g,ut=/^(?:submit|button|image|reset|file)$/i,lt=/^(?:input|select|textarea|keygen)/i;x.param=function(e,t){function n(e,t){t=x.isFunction(t)?t():t,i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==t?"":t)}var r,i=[];if(Array.isArray(e)||e.jquery&&!x.isPlainObject(e))x.each(e,function(){n(this.name,this.value)});else for(r in e)!function n(r,e,i,o){if(Array.isArray(e))x.each(e,function(e,t){i||at.test(r)?o(r,t):n(r+"["+("object"==typeof t&&null!=t?e:"")+"]",t,i,o)});else if(i||"object"!==x.type(e))o(r,e);else for(var t in e)n(r+"["+t+"]",e[t],i,o)}(r,e[r],t,n);return i.join("&")},x.fn.extend({serialize:function(){return x.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=x.prop(this,"elements");return e?x.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!x(this).is(":disabled")&&lt.test(this.nodeName)&&!ut.test(e)&&(this.checked||!re.test(e))}).map(function(e,t){var n=x(this).val();return null==n?null:Array.isArray(n)?x.map(n,function(e){return{name:t.name,value:e.replace(st,"\r\n")}}):{name:t.name,value:n.replace(st,"\r\n")}}).get()}}),x.fn.extend({wrapAll:function(e){return this[0]&&(x.isFunction(e)&&(e=e.call(this[0])),e=x(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return x.isFunction(n)?this.each(function(e){x(this).wrapInner(n.call(this,e))}):this.each(function(){var e=x(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=x.isFunction(t);return this.each(function(e){x(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){x(this).replaceWith(this.childNodes)}),this}}),x.expr.pseudos.hidden=function(e){return!x.expr.pseudos.visible(e)},x.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},y.createHTMLDocument=((t=g.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===t.childNodes.length),x.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(y.createHTMLDocument?((r=(t=g.implementation.createHTMLDocument("")).createElement("base")).href=g.location.href,t.head.appendChild(r)):t=g),r=!n&&[],(n=D.exec(e))?[t.createElement(n[1])]:(n=ce([e],t,r),r&&r.length&&x(r).remove(),x.merge([],n.childNodes)));var r},x.offset={setOffset:function(e,t,n){var r,i,o,a,s=x.css(e,"position"),u=x(e),l={};"static"===s&&(e.style.position="relative"),o=u.offset(),r=x.css(e,"top"),a=x.css(e,"left"),a=("absolute"===s||"fixed"===s)&&-1<(r+a).indexOf("auto")?(i=(s=u.position()).top,s.left):(i=parseFloat(r)||0,parseFloat(a)||0),null!=(t=x.isFunction(t)?t.call(e,n,x.extend({},o)):t).top&&(l.top=t.top-o.top+i),null!=t.left&&(l.left=t.left-o.left+a),"using"in t?t.using.call(e,l):u.css(l)}},x.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){x.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),r=(n=r.ownerDocument).documentElement,n=n.defaultView,{top:e.top+n.pageYOffset-r.clientTop,left:e.left+n.pageXOffset-r.clientLeft}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===x.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),r={top:(r=!k(e[0],"html")?e.offset():r).top+x.css(e[0],"borderTopWidth",!0),left:r.left+x.css(e[0],"borderLeftWidth",!0)}),{top:t.top-r.top-x.css(n,"marginTop",!0),left:t.left-r.left-x.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===x.css(e,"position");)e=e.offsetParent;return e||fe})}}),x.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,i){var o="pageYOffset"===i;x.fn[t]=function(e){return z(this,function(e,t,n){var r;return x.isWindow(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n?r?r[i]:e[t]:void(r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n)},t,e,arguments.length)}}),x.each(["top","left"],function(e,n){x.cssHooks[n]=Me(y.pixelPosition,function(e,t){if(t)return t=We(e,n),Re.test(t)?x(e).position()[n]+"px":t})}),x.each({Height:"height",Width:"width"},function(a,s){x.each({padding:"inner"+a,content:s,"":"outer"+a},function(r,o){x.fn[o]=function(e,t){var n=arguments.length&&(r||"boolean"!=typeof e),i=r||(!0===e||!0===t?"margin":"border");return z(this,function(e,t,n){var r;return x.isWindow(e)?0===o.indexOf("outer")?e["inner"+a]:e.document.documentElement["client"+a]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+a],r["scroll"+a],e.body["offset"+a],r["offset"+a],r["client"+a])):void 0===n?x.css(e,t,i):x.style(e,t,n,i)},s,n?e:void 0,n)}})}),x.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),x.holdReady=function(e){e?x.readyWait++:x.ready(!0)},x.isArray=Array.isArray,x.parseJSON=JSON.parse,x.nodeName=k,"function"==typeof define&&define.amd&&define("jquery",[],function(){return x});var ct=h.jQuery,ft=h.$;return x.noConflict=function(e){return h.$===x&&(h.$=ft),e&&h.jQuery===x&&(h.jQuery=ct),x},e||(h.jQuery=h.$=x),x});
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Popper=t()}(this,function(){"use strict";function r(e){return e&&"[object Function]"==={}.toString.call(e)}function c(e,t){if(1!==e.nodeType)return[];e=getComputedStyle(e,null);return t?e[t]:e}function d(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function h(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=c(e),n=t.overflow,o=t.overflowX,t=t.overflowY;return/(auto|scroll)/.test(n+t+o)?e:h(d(e))}function p(e){var t=e&&e.offsetParent,n=t&&t.nodeName;return n&&"BODY"!==n&&"HTML"!==n?-1!==["TD","TABLE"].indexOf(t.nodeName)&&"static"===c(t,"position")?p(t):t:(e?e.ownerDocument:document).documentElement}function i(e){return null===e.parentNode?e:i(e.parentNode)}function m(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,o=n?e:t,r=n?t:e,n=document.createRange();n.setStart(o,0),n.setEnd(r,0);n=n.commonAncestorContainer;if(e!==n&&t!==n||o.contains(r))return"BODY"===(r=(o=n).nodeName)||"HTML"!==r&&p(o.firstElementChild)!==o?p(n):n;n=i(e);return n.host?m(n.host,t):m(e,i(t).host)}function g(e,t){var n="top"===(1<arguments.length&&void 0!==t?t:"top")?"scrollTop":"scrollLeft",t=e.nodeName;if("BODY"!==t&&"HTML"!==t)return e[n];t=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||t)[n]}function s(e,t){var n="x"===t?"Left":"Top",t="Left"==n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+t+"Width"],10)}function o(e,t,n,o){return F(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],I()?n["offset"+e]+o["margin"+("Height"===e?"Top":"Left")]+o["margin"+("Height"===e?"Bottom":"Right")]:0)}function b(){var e=document.body,t=document.documentElement,n=I()&&getComputedStyle(t);return{height:o("Height",e,t,n),width:o("Width",e,t,n)}}function v(e){return V({},e,{right:e.left+e.width,bottom:e.top+e.height})}function l(e){var t={};if(I())try{var t=e.getBoundingClientRect(),n=g(e,"top"),o=g(e,"left");t.top+=n,t.left+=o,t.bottom+=n,t.right+=o}catch(e){}else t=e.getBoundingClientRect();var r={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},n="HTML"===e.nodeName?b():{},o=n.width||e.clientWidth||r.right-r.left,t=n.height||e.clientHeight||r.bottom-r.top,n=e.offsetWidth-o,o=e.offsetHeight-t;return(n||o)&&(n-=s(t=c(e),"x"),o-=s(t,"y"),r.width-=n,r.height-=o),v(r)}function w(e,t){var n=I(),o="HTML"===t.nodeName,r=l(e),i=l(t),s=h(e),f=c(t),a=parseFloat(f.borderTopWidth,10),e=parseFloat(f.borderLeftWidth,10),r=v({top:r.top-i.top-a,left:r.left-i.left-e,width:r.width,height:r.height});return r.marginTop=0,r.marginLeft=0,!n&&o&&(o=parseFloat(f.marginTop,10),f=parseFloat(f.marginLeft,10),r.top-=a-o,r.bottom-=a-o,r.left-=e-f,r.right-=e-f,r.marginTop=o,r.marginLeft=f),r=(n?t.contains(s):t===s&&"BODY"!==s.nodeName)?function(e,t,n){var o=2<arguments.length&&void 0!==n&&n,n=g(t,"top"),t=g(t,"left"),o=o?-1:1;return e.top+=n*o,e.bottom+=n*o,e.left+=t*o,e.right+=t*o,e}(r,t):r}function f(e,t,n,o){var r,i,s,f,a,p,l={top:0,left:0},u=m(e,t);return"viewport"===o?(s=(i=u).ownerDocument.documentElement,f=w(i,s),a=F(s.clientWidth,window.innerWidth||0),p=F(s.clientHeight,window.innerHeight||0),i=g(s),s=g(s,"left"),l=v({top:i-f.top+f.marginTop,left:s-f.left+f.marginLeft,width:a,height:p})):("scrollParent"===o?"BODY"===(r=h(d(t))).nodeName&&(r=e.ownerDocument.documentElement):r="window"===o?e.ownerDocument.documentElement:o,o=w(r,u),"HTML"!==r.nodeName||function e(t){var n=t.nodeName;return"BODY"!==n&&"HTML"!==n&&("fixed"===c(t,"position")||e(d(t)))}(u)?l=o:(u=(r=b()).height,r=r.width,l.top+=o.top-o.marginTop,l.bottom=u+o.top,l.left+=o.left-o.marginLeft,l.right=r+o.left)),l.left+=n,l.top+=n,l.right-=n,l.bottom-=n,l}function a(e,t,n,o,r,i){i=5<arguments.length&&void 0!==i?i:0;if(-1===e.indexOf("auto"))return e;var r=f(n,o,i,r),s={top:{width:r.width,height:t.top-r.top},right:{width:r.right-t.right,height:r.height},bottom:{width:r.width,height:r.bottom-t.bottom},left:{width:t.left-r.left,height:r.height}},t=Object.keys(s).map(function(e){return V({key:e},s[e],{area:(e=s[e]).width*e.height})}).sort(function(e,t){return t.area-e.area}),r=t.filter(function(e){var t=e.width,e=e.height;return t>=n.clientWidth&&e>=n.clientHeight}),t=(0<r.length?r:t)[0].key,e=e.split("-")[1];return t+(e?"-"+e:"")}function u(e,t,n){return w(n,m(t,n))}function y(e){var t=getComputedStyle(e),n=parseFloat(t.marginTop)+parseFloat(t.marginBottom),t=parseFloat(t.marginLeft)+parseFloat(t.marginRight);return{width:e.offsetWidth+t,height:e.offsetHeight+n}}function E(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function O(e,t,n){n=n.split("-")[0];var o=y(e),r={width:o.width,height:o.height},i=-1!==["right","left"].indexOf(n),s=i?"top":"left",f=i?"left":"top",e=i?"height":"width",i=i?"width":"height";return r[s]=t[s]+t[e]/2-o[e]/2,r[f]=n===f?t[f]-o[i]:t[E(f)],r}function x(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function L(e,n,t){return(void 0===t?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var o=x(e,function(e){return e[t]===n});return e.indexOf(o)}(e,"name",t))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var t=e.function||e.fn;e.enabled&&r(t)&&(n.offsets.popper=v(n.offsets.popper),n.offsets.reference=v(n.offsets.reference),n=t(n,e))}),n}function e(e,n){return e.some(function(e){var t=e.name;return e.enabled&&t===n})}function T(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),o=0;o<t.length-1;o++){var r=t[o],r=r?""+r+n:e;if(void 0!==document.body.style[r])return r}return null}function D(e){e=e.ownerDocument;return e?e.defaultView:window}function t(e,t,n,o){n.updateBound=o,D(e).addEventListener("resize",n.updateBound,{passive:!0});e=h(e);return function e(t,n,o,r){var i="BODY"===t.nodeName,t=i?t.ownerDocument.defaultView:t;t.addEventListener(n,o,{passive:!0}),i||e(h(t.parentNode),n,o,r),r.push(t)}(e,"scroll",n.updateBound,n.scrollParents),n.scrollElement=e,n.eventsEnabled=!0,n}function n(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,D(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function N(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function k(n,o){Object.keys(o).forEach(function(e){var t="";-1!==["width","height","top","right","bottom","left"].indexOf(e)&&N(o[e])&&(t="px"),n.style[e]=o[e]+t})}function B(e,t,n){var o=x(e,function(e){return e.name===t}),r=!!o&&e.some(function(e){return e.name===n&&e.enabled&&e.order<o.order});return r||(e="`"+t+"`",console.warn("`"+n+"` modifier is required by "+e+" modifier in order to work, be sure to include it before "+e+"!")),r}function H(e,t){t=1<arguments.length&&void 0!==t&&t,e=G.indexOf(e),e=G.slice(e+1).concat(G.slice(0,e));return t?e.reverse():e}function W(e,f,a,t){var r=[0,0],o=-1!==["right","left"].indexOf(t),n=e.split(/(\+|\-)/).map(function(e){return e.trim()}),t=n.indexOf(x(n,function(e){return-1!==e.search(/,|\s/)}));n[t]&&-1===n[t].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");e=/\s*,\s*|\s+/;return(-1===t?[n]:[n.slice(0,t).concat([n[t].split(e)[0]]),[n[t].split(e)[1]].concat(n.slice(t+1))]).map(function(e,t){var s=(1===t?!o:o)?"height":"width",n=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,n=!0,e):n?(e[e.length-1]+=t,n=!1,e):e.concat(t)},[]).map(function(e){return n=s,o=f,r=a,e=+(i=(t=e).match(/((?:\-|\+)?\d*\.?\d*)(.*)/))[1],i=i[2],e?0!==i.indexOf("%")?"vh"!==i&&"vw"!==i?e:("vh"===i?F(document.documentElement.clientHeight,window.innerHeight||0):F(document.documentElement.clientWidth,window.innerWidth||0))/100*e:v(r="%p"===i?o:r)[n]/100*e:t;var t,n,o,r,i})}).forEach(function(n,o){n.forEach(function(e,t){N(e)&&(r[o]+=e*("-"===n[t-1]?-1:1))})}),r}for(var A=Math.min,C=Math.floor,F=Math.max,P="undefined"!=typeof window&&"undefined"!=typeof document,S=["Edge","Trident","Firefox"],M=0,j=0;j<S.length;j+=1)if(P&&0<=navigator.userAgent.indexOf(S[j])){M=1;break}function R(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var U,Y=P&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},M))}},I=function(){return U=null==U?-1!==navigator.appVersion.indexOf("MSIE 10"):U},q=function(e,t,n){return t&&Q(e.prototype,t),n&&Q(e,n),e},V=Object.assign||function(e){for(var t,n=1;n<arguments.length;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},z=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],G=z.slice(3),_="flip",X="clockwise",J="counterclockwise",q=(q(K,[{key:"update",value:function(){return function(){var e;this.state.isDestroyed||((e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}}).offsets.reference=u(this.state,this.popper,this.reference),e.placement=a(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.offsets.popper=O(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position="absolute",e=L(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e)))}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,e(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.left="",this.popper.style.position="",this.popper.style.top="",this.popper.style[T("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=t(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return n.call(this)}}]),K);function K(e,t){var n=this,o=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")})(this,K),this.scheduleUpdate=function(){return requestAnimationFrame(n.update)},this.update=Y(this.update.bind(this)),this.options=V({},K.Defaults,o),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=t&&t.jquery?t[0]:t,this.options.modifiers={},Object.keys(V({},K.Defaults.modifiers,o.modifiers)).forEach(function(e){n.options.modifiers[e]=V({},K.Defaults.modifiers[e]||{},o.modifiers?o.modifiers[e]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return V({name:e},n.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&r(e.onLoad)&&e.onLoad(n.reference,n.popper,n.options,e,n.state)}),this.update();t=this.options.eventsEnabled;t&&this.enableEventListeners(),this.state.eventsEnabled=t}function Q(e,t){for(var n,o=0;o<t.length;o++)(n=t[o]).enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}return q.Utils=("undefined"==typeof window?global:window).PopperUtils,q.placements=z,q.Defaults={placement:"bottom",eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t,n,o=e.placement,r=o.split("-")[0],i=o.split("-")[1];return i&&(t=(n=e.offsets).reference,o=n.popper,r=(n=-1!==["bottom","top"].indexOf(r))?"width":"height",r={start:R({},n=n?"left":"top",t[n]),end:R({},n,t[n]+t[r]-o[r])},e.offsets.popper=V({},o,r[i])),e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,o=e.placement,t=(r=e.offsets).popper,r=r.reference,o=o.split("-")[0],r=N(+n)?[+n,0]:W(n,t,r,o);return"left"===o?(t.top+=r[0],t.left-=r[1]):"right"===o?(t.top+=r[0],t.left+=r[1]):"top"===o?(t.left+=r[0],t.top-=r[1]):"bottom"===o&&(t.left+=r[0],t.top+=r[1]),e.popper=t,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,o){var t=o.boundariesElement||p(e.instance.popper);e.instance.reference===t&&(t=p(t));var r=f(e.instance.popper,e.instance.reference,o.padding,t);o.boundaries=r;var t=o.priority,i=e.offsets.popper,n={primary:function(e){var t=i[e];return i[e]<r[e]&&!o.escapeWithReference&&(t=F(i[e],r[e])),R({},e,t)},secondary:function(e){var t="right"===e?"left":"top",n=i[t];return i[e]>r[e]&&!o.escapeWithReference&&(n=A(i[t],r[e]-("right"===e?i.width:i.height))),R({},t,n)}};return t.forEach(function(e){var t=-1===["left","top"].indexOf(e)?"secondary":"primary";i=V({},i,n[t](e))}),e.offsets.popper=i,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,o=t.reference,r=e.placement.split("-")[0],i=C,s=-1!==["top","bottom"].indexOf(r),t=s?"right":"bottom",r=s?"left":"top",s=s?"width":"height";return n[t]<i(o[r])&&(e.offsets.popper[r]=i(o[r])-n[s]),n[r]>i(o[t])&&(e.offsets.popper[r]=i(o[t])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){if(!B(e.instance.modifiers,"arrow","keepTogether"))return e;var n=t.element;if("string"==typeof n){if(!(n=e.instance.popper.querySelector(n)))return e}else if(!e.instance.popper.contains(n))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var o=e.placement.split("-")[0],r=e.offsets,i=r.popper,s=r.reference,f=-1!==["left","right"].indexOf(o),a=f?"height":"width",p=f?"Top":"Left",l=p.toLowerCase(),t=f?"left":"top",r=f?"bottom":"right",o=y(n)[a];s[r]-o<i[l]&&(e.offsets.popper[l]-=i[l]-(s[r]-o)),s[l]+o>i[r]&&(e.offsets.popper[l]+=s[l]+o-i[r]),e.offsets.popper=v(e.offsets.popper);f=s[l]+s[a]/2-o/2,r=c(e.instance.popper),s=parseFloat(r["margin"+p],10),p=parseFloat(r["border"+p+"Width"],10),p=f-e.offsets.popper[l]-s-p,p=F(A(i[a]-o,p),0);return e.arrowElement=n,e.offsets.arrow=(R(n={},l,Math.round(p)),R(n,t,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(a,p){if(e(a.instance.modifiers,"inner"))return a;if(a.flipped&&a.placement===a.originalPlacement)return a;var l=f(a.instance.popper,a.instance.reference,p.padding,p.boundariesElement),u=a.placement.split("-")[0],c=E(u),d=a.placement.split("-")[1]||"",h=[];switch(p.behavior){case _:h=[u,c];break;case X:h=H(u);break;case J:h=H(u,!0);break;default:h=p.behavior}return h.forEach(function(e,t){if(u!==e||h.length===t+1)return a;u=a.placement.split("-")[0],c=E(u);var n=a.offsets.popper,o=a.offsets.reference,r=C,i="left"===u&&r(n.right)>r(o.left)||"right"===u&&r(n.left)<r(o.right)||"top"===u&&r(n.bottom)>r(o.top)||"bottom"===u&&r(n.top)<r(o.bottom),s=r(n.left)<r(l.left),f=r(n.right)>r(l.right),e=r(n.top)<r(l.top),o=r(n.bottom)>r(l.bottom),n="left"===u&&s||"right"===u&&f||"top"===u&&e||"bottom"===u&&o,r=-1!==["top","bottom"].indexOf(u),o=!!p.flipVariations&&(r&&"start"===d&&s||r&&"end"===d&&f||!r&&"start"===d&&e||!r&&"end"===d&&o);(i||n||o)&&(a.flipped=!0,(i||n)&&(u=h[t+1]),o&&(d="end"===(o=d)?"start":"start"===o?"end":o),a.placement=u+(d?"-"+d:""),a.offsets.popper=V({},a.offsets.popper,O(a.instance.popper,a.offsets.reference,a.placement)),a=L(a.instance.modifiers,a,"flip"))}),a},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],o=e.offsets,r=o.popper,i=o.reference,s=-1!==["left","right"].indexOf(n),o=-1===["top","left"].indexOf(n);return r[s?"left":"top"]=i[n]-(o?r[s?"width":"height"]:0),e.placement=E(t),e.offsets.popper=v(r),e}},hide:{order:800,enabled:!0,fn:function(e){if(!B(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=x(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,o=t.y,r=e.offsets.popper,i=x(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==i&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var s=void 0===i?t.gpuAcceleration:i,f=l(p(e.instance.popper)),a={position:r.position},t={left:C(r.left),top:C(r.top),bottom:C(r.bottom),right:C(r.right)},i="bottom"===n?"top":"bottom",r="right"===o?"left":"right",n=T("transform"),o="bottom"==i?-f.height+t.bottom:t.top,t="right"==r?-f.width+t.right:t.left;s&&n?(a[n]="translate3d("+t+"px, "+o+"px, 0)",a[i]=0,a[r]=0,a.willChange="transform"):(n="right"==r?-1:1,a[i]=o*("bottom"==i?-1:1),a[r]=t*n,a.willChange=i+", "+r);r={"x-placement":e.placement};return e.attributes=V({},r,e.attributes),e.styles=V({},a,e.styles),e.arrowStyles=V({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){return k(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach(function(e){!1===n[e]?t.removeAttribute(e):t.setAttribute(e,n[e])}),e.arrowElement&&Object.keys(e.arrowStyles).length&&k(e.arrowElement,e.arrowStyles),e;var t,n},onLoad:function(e,t,n,o,r){var i=u(0,t,e),e=a(n.placement,i,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",e),k(t,{position:"absolute"}),n},gpuAcceleration:void 0}}},q});
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("jquery"),require("popper.js")):"function"==typeof define&&define.amd?define(["exports","jquery","popper.js"],e):e(t.bootstrap={},t.jQuery,t.Popper)}(this,function(t,e,s){"use strict";function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function T(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),t}function b(){return(b=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n,i=arguments[e];for(n in i)Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}return t}).apply(this,arguments)}e=e&&e.hasOwnProperty("default")?e.default:e,s=s&&s.hasOwnProperty("default")?s.default:s;var o,n,r,a,l,h,c,u,d,f,g,_,m,p,v,E,y,C,I,w,A,D,S,N,O,k,P,j,H,L,R,x,U,W,K,M,Q,B,F,V,Y,q,z,Z,J,$,G,X,tt,et,nt,it,st,ot,rt,at,lt,ht,ct,ut,dt,ft,gt,_t,mt,pt,vt,Et=(mt=e,pt=!1,vt={TRANSITION_END:"bsTransitionEnd",getUID:function(t){for(;t+=~~(1e6*Math.random()),document.getElementById(t););return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");"#"===(e=!e||"#"===e?t.getAttribute("href")||"":e).charAt(0)&&(t=e,e=t="function"==typeof mt.escapeSelector?mt.escapeSelector(t).substr(1):t.replace(/(:|\.|\[|\]|,|=|@)/g,"\\$1"));try{return 0<mt(document).find(e).length?e:null}catch(t){return null}},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(t){mt(t).trigger(pt.end)},supportsTransitionEnd:function(){return Boolean(pt)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,e,n){for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)){var s=n[i],o=e[i],o=o&&vt.isElement(o)?"element":{}.toString.call(o).match(/\s([a-zA-Z]+)/)[1].toLowerCase();if(!new RegExp(s).test(o))throw new Error(t.toUpperCase()+': Option "'+i+'" provided type "'+o+'" but expected type "'+s+'".')}}},pt=("undefined"==typeof window||!window.QUnit)&&{end:"transitionend"},mt.fn.emulateTransitionEnd=function(t){var e=this,n=!1;return mt(this).one(vt.TRANSITION_END,function(){n=!0}),setTimeout(function(){n||vt.triggerTransitionEnd(e)},t),this},vt.supportsTransitionEnd()&&(mt.event.special[vt.TRANSITION_END]={bindType:pt.end,delegateType:pt.end,handle:function(t){if(mt(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}}),vt),yt=(bt="."+(r="bs.alert"),a=(o=e).fn[n="alert"],l={CLOSE:"close"+bt,CLOSED:"closed"+bt,CLICK_DATA_API:"click"+bt+".data-api"},(_t=Pt.prototype).close=function(t){t=t||this._element;t=this._getRootElement(t);this._triggerCloseEvent(t).isDefaultPrevented()||this._removeElement(t)},_t.dispose=function(){o.removeData(this._element,r),this._element=null},_t._getRootElement=function(t){var e=Et.getSelectorFromElement(t),n=!1;return n=(n=e?o(e)[0]:n)||o(t).closest(".alert")[0]},_t._triggerCloseEvent=function(t){var e=o.Event(l.CLOSE);return o(t).trigger(e),e},_t._removeElement=function(e){var n=this;o(e).removeClass("show"),Et.supportsTransitionEnd()&&o(e).hasClass("fade")?o(e).one(Et.TRANSITION_END,function(t){return n._destroyElement(e,t)}).emulateTransitionEnd(150):this._destroyElement(e)},_t._destroyElement=function(t){o(t).detach().trigger(l.CLOSED).remove()},Pt._jQueryInterface=function(n){return this.each(function(){var t=o(this),e=t.data(r);e||(e=new Pt(this),t.data(r,e)),"close"===n&&e[n](this)})},Pt._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this)}},T(Pt,null,[{key:"VERSION",get:function(){return"4.0.0"}}]),h=Pt,o(document).on(l.CLICK_DATA_API,'[data-dismiss="alert"]',h._handleDismiss(new h)),o.fn[n]=h._jQueryInterface,o.fn[n].Constructor=h,o.fn[n].noConflict=function(){return o.fn[n]=a,h._jQueryInterface},h),Ct=(It="."+(d="bs.button"),f=(c=e).fn[u="button"],g="active",Dt='[data-toggle^="button"]',_=".btn",At={CLICK_DATA_API:"click"+It+(wt=".data-api"),FOCUS_BLUR_DATA_API:"focus"+It+wt+" blur"+It+wt},(gt=kt.prototype).toggle=function(){var t=!0,e=!0,n=c(this._element).closest('[data-toggle="buttons"]')[0];if(n){var i,s=c(this._element).find("input")[0];if(s){if("radio"===s.type&&(s.checked&&c(this._element).hasClass(g)?t=!1:(i=c(n).find(".active")[0])&&c(i).removeClass(g)),t){if(s.hasAttribute("disabled")||n.hasAttribute("disabled")||s.classList.contains("disabled")||n.classList.contains("disabled"))return;s.checked=!c(this._element).hasClass(g),c(s).trigger("change")}s.focus(),e=!1}}e&&this._element.setAttribute("aria-pressed",!c(this._element).hasClass(g)),t&&c(this._element).toggleClass(g)},gt.dispose=function(){c.removeData(this._element,d),this._element=null},kt._jQueryInterface=function(e){return this.each(function(){var t=c(this).data(d);t||(t=new kt(this),c(this).data(d,t)),"toggle"===e&&t[e]()})},T(kt,null,[{key:"VERSION",get:function(){return"4.0.0"}}]),m=kt,c(document).on(At.CLICK_DATA_API,Dt,function(t){t.preventDefault();t=t.target;c(t).hasClass("btn")||(t=c(t).closest(_)),m._jQueryInterface.call(c(t),"toggle")}).on(At.FOCUS_BLUR_DATA_API,Dt,function(t){var e=c(t.target).closest(_)[0];c(e).toggleClass("focus",/^focus(in)?$/.test(t.type))}),c.fn[u]=m._jQueryInterface,c.fn[u].Constructor=m,c.fn[u].noConflict=function(){return c.fn[u]=f,m._jQueryInterface},m),Tt=function(c){var t,e="carousel",s="bs.carousel",n="."+s,i=c.fn[e],o={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},r={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},u="next",a="prev",d={SLIDE:"slide"+n,SLID:"slid"+n,KEYDOWN:"keydown"+n,MOUSEENTER:"mouseenter"+n,MOUSELEAVE:"mouseleave"+n,TOUCHEND:"touchend"+n,LOAD_DATA_API:"load"+n+".data-api",CLICK_DATA_API:"click"+n+".data-api"},f="active",l=".active",g=".active.carousel-item",h=".carousel-item",_=".carousel-item-next, .carousel-item-prev",m=".carousel-indicators",p="[data-slide], [data-slide-to]",v='[data-ride="carousel"]',E=((t=y.prototype).next=function(){this._isSliding||this._slide(u)},t.nextWhenVisible=function(){!document.hidden&&c(this._element).is(":visible")&&"hidden"!==c(this._element).css("visibility")&&this.next()},t.prev=function(){this._isSliding||this._slide(a)},t.pause=function(t){t||(this._isPaused=!0),c(this._element).find(_)[0]&&Et.supportsTransitionEnd()&&(Et.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},t.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},t.to=function(t){var e=this;this._activeElement=c(this._element).find(g)[0];var n=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)c(this._element).one(d.SLID,function(){return e.to(t)});else{if(n===t)return this.pause(),void this.cycle();this._slide(n<t?u:a,this._items[t])}},t.dispose=function(){c(this._element).off(n),c.removeData(this._element,s),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},t._getConfig=function(t){return t=b({},o,t),Et.typeCheckConfig(e,t,r),t},t._addEventListeners=function(){var e=this;this._config.keyboard&&c(this._element).on(d.KEYDOWN,function(t){return e._keydown(t)}),"hover"===this._config.pause&&(c(this._element).on(d.MOUSEENTER,function(t){return e.pause(t)}).on(d.MOUSELEAVE,function(t){return e.cycle(t)}),"ontouchstart"in document.documentElement&&c(this._element).on(d.TOUCHEND,function(){e.pause(),e.touchTimeout&&clearTimeout(e.touchTimeout),e.touchTimeout=setTimeout(function(t){return e.cycle(t)},500+e._config.interval)}))},t._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next()}},t._getItemIndex=function(t){return this._items=c.makeArray(c(t).parent().find(h)),this._items.indexOf(t)},t._getItemByDirection=function(t,e){var n=t===u,i=t===a,s=this._getItemIndex(e),o=this._items.length-1;if((i&&0===s||n&&s===o)&&!this._config.wrap)return e;t=(s+(t===a?-1:1))%this._items.length;return-1==t?this._items[this._items.length-1]:this._items[t]},t._triggerSlideEvent=function(t,e){var n=this._getItemIndex(t),i=this._getItemIndex(c(this._element).find(g)[0]),n=c.Event(d.SLIDE,{relatedTarget:t,direction:e,from:i,to:n});return c(this._element).trigger(n),n},t._setActiveIndicatorElement=function(t){this._indicatorsElement&&(c(this._indicatorsElement).find(l).removeClass(f),(t=this._indicatorsElement.children[this._getItemIndex(t)])&&c(t).addClass(f))},t._slide=function(t,e){var n,i,s,o=this,r=c(this._element).find(g)[0],a=this._getItemIndex(r),l=e||r&&this._getItemByDirection(t,r),h=this._getItemIndex(l),e=Boolean(this._interval),t=t===u?(n="carousel-item-left",i="carousel-item-next","left"):(n="carousel-item-right",i="carousel-item-prev","right");l&&c(l).hasClass(f)?this._isSliding=!1:!this._triggerSlideEvent(l,t).isDefaultPrevented()&&r&&l&&(this._isSliding=!0,e&&this.pause(),this._setActiveIndicatorElement(l),s=c.Event(d.SLID,{relatedTarget:l,direction:t,from:a,to:h}),Et.supportsTransitionEnd()&&c(this._element).hasClass("slide")?(c(l).addClass(i),Et.reflow(l),c(r).addClass(n),c(l).addClass(n),c(r).one(Et.TRANSITION_END,function(){c(l).removeClass(n+" "+i).addClass(f),c(r).removeClass(f+" "+i+" "+n),o._isSliding=!1,setTimeout(function(){return c(o._element).trigger(s)},0)}).emulateTransitionEnd(600)):(c(r).removeClass(f),c(l).addClass(f),this._isSliding=!1,c(this._element).trigger(s)),e&&this.cycle())},y._jQueryInterface=function(i){return this.each(function(){var t=c(this).data(s),e=b({},o,c(this).data());"object"==typeof i&&(e=b({},e,i));var n="string"==typeof i?i:e.slide;if(t||(t=new y(this,e),c(this).data(s,t)),"number"==typeof i)t.to(i);else if("string"==typeof n){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}else e.interval&&(t.pause(),t.cycle())})},y._dataApiClickHandler=function(t){var e,n,i=Et.getSelectorFromElement(this);!i||(e=c(i)[0])&&c(e).hasClass("carousel")&&(n=b({},c(e).data(),c(this).data()),(i=this.getAttribute("data-slide-to"))&&(n.interval=!1),y._jQueryInterface.call(c(e),n),i&&c(e).data(s).to(i),t.preventDefault())},T(y,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return o}}]),y);function y(t,e){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(e),this._element=c(t)[0],this._indicatorsElement=c(this._element).find(m)[0],this._addEventListeners()}return c(document).on(d.CLICK_DATA_API,p,E._dataApiClickHandler),c(window).on(d.LOAD_DATA_API,function(){c(v).each(function(){var t=c(this);E._jQueryInterface.call(t,t.data())})}),c.fn[e]=E._jQueryInterface,c.fn[e].Constructor=E,c.fn[e].noConflict=function(){return c.fn[e]=i,E._jQueryInterface},E}(e),bt=function(r){var e="collapse",o="bs.collapse",t="."+o,n=r.fn[e],s={toggle:!0,parent:""},i={toggle:"boolean",parent:"(string|element)"},a={SHOW:"show"+t,SHOWN:"shown"+t,HIDE:"hide"+t,HIDDEN:"hidden"+t,CLICK_DATA_API:"click"+t+".data-api"},l="show",h="collapse",c="collapsing",u="collapsed",d=".show, .collapsing",f='[data-toggle="collapse"]',g=((t=_.prototype).toggle=function(){r(this._element).hasClass(l)?this.hide():this.show()},t.show=function(){var t,e,n,i,s=this;this._isTransitioning||r(this._element).hasClass(l)||(i=this._parent&&0===(i=r.makeArray(r(this._parent).find(d).filter('[data-parent="'+this._config.parent+'"]'))).length?null:i)&&(n=r(i).not(this._selector).data(o))&&n._isTransitioning||(t=r.Event(a.SHOW),r(this._element).trigger(t),t.isDefaultPrevented()||(i&&(_._jQueryInterface.call(r(i).not(this._selector),"hide"),n||r(i).data(o,null)),e=this._getDimension(),r(this._element).removeClass(h).addClass(c),(this._element.style[e]=0)<this._triggerArray.length&&r(this._triggerArray).removeClass(u).attr("aria-expanded",!0),this.setTransitioning(!0),n=function(){r(s._element).removeClass(c).addClass(h).addClass(l),s._element.style[e]="",s.setTransitioning(!1),r(s._element).trigger(a.SHOWN)},Et.supportsTransitionEnd()?(i="scroll"+(e[0].toUpperCase()+e.slice(1)),r(this._element).one(Et.TRANSITION_END,n).emulateTransitionEnd(600),this._element.style[e]=this._element[i]+"px"):n()))},t.hide=function(){var t=this;if(!this._isTransitioning&&r(this._element).hasClass(l)){var e=r.Event(a.HIDE);if(r(this._element).trigger(e),!e.isDefaultPrevented()){var n=this._getDimension();if(this._element.style[n]=this._element.getBoundingClientRect()[n]+"px",Et.reflow(this._element),r(this._element).addClass(c).removeClass(h).removeClass(l),0<this._triggerArray.length)for(var i=0;i<this._triggerArray.length;i++){var s=this._triggerArray[i],o=Et.getSelectorFromElement(s);null!==o&&(r(o).hasClass(l)||r(s).addClass(u).attr("aria-expanded",!1))}this.setTransitioning(!0);e=function(){t.setTransitioning(!1),r(t._element).removeClass(c).addClass(h).trigger(a.HIDDEN)};this._element.style[n]="",Et.supportsTransitionEnd()?r(this._element).one(Et.TRANSITION_END,e).emulateTransitionEnd(600):e()}}},t.setTransitioning=function(t){this._isTransitioning=t},t.dispose=function(){r.removeData(this._element,o),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},t._getConfig=function(t){return(t=b({},s,t)).toggle=Boolean(t.toggle),Et.typeCheckConfig(e,t,i),t},t._getDimension=function(){return r(this._element).hasClass("width")?"width":"height"},t._getParent=function(){var n=this,t=null;Et.isElement(this._config.parent)?(t=this._config.parent,void 0!==this._config.parent.jquery&&(t=this._config.parent[0])):t=r(this._config.parent)[0];var e='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return r(t).find(e).each(function(t,e){n._addAriaAndCollapsedClass(_._getTargetFromElement(e),[e])}),t},t._addAriaAndCollapsedClass=function(t,e){t&&(t=r(t).hasClass(l),0<e.length&&r(e).toggleClass(u,!t).attr("aria-expanded",t))},_._getTargetFromElement=function(t){t=Et.getSelectorFromElement(t);return t?r(t)[0]:null},_._jQueryInterface=function(i){return this.each(function(){var t=r(this),e=t.data(o),n=b({},s,t.data(),"object"==typeof i&&i);if(!e&&n.toggle&&/show|hide/.test(i)&&(n.toggle=!1),e||(e=new _(this,n),t.data(o,e)),"string"==typeof i){if(void 0===e[i])throw new TypeError('No method named "'+i+'"');e[i]()}})},T(_,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return s}}]),_);function _(t,e){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(e),this._triggerArray=r.makeArray(r('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var n=r(f),i=0;i<n.length;i++){var s=n[i],o=Et.getSelectorFromElement(s);null!==o&&0<r(o).filter(t).length&&(this._selector=o,this._triggerArray.push(s))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}return r(document).on(a.CLICK_DATA_API,f,function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var n=r(this),t=Et.getSelectorFromElement(this);r(t).each(function(){var t=r(this),e=t.data(o)?"toggle":n.data();g._jQueryInterface.call(t,e)})}),r.fn[e]=g._jQueryInterface,r.fn[e].Constructor=g,r.fn[e].noConflict=function(){return r.fn[e]=n,g._jQueryInterface},g}(e),It=(tt="dropdown",nt="."+(et="bs.dropdown"),_t=".data-api",it=(X=e).fn[tt],st=new RegExp("38|40|27"),ot={HIDE:"hide"+nt,HIDDEN:"hidden"+nt,SHOW:"show"+nt,SHOWN:"shown"+nt,CLICK:"click"+nt,CLICK_DATA_API:"click"+nt+_t,KEYDOWN_DATA_API:"keydown"+nt+_t,KEYUP_DATA_API:"keyup"+nt+_t},rt="disabled",at="show",lt="dropdown-menu-right",ht='[data-toggle="dropdown"]',ct=".dropdown-menu",ut={offset:0,flip:!0,boundary:"scrollParent"},dt={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)"},(_t=Ot.prototype).toggle=function(){if(!this._element.disabled&&!X(this._element).hasClass(rt)){var t=Ot._getParentFromElement(this._element),e=X(this._menu).hasClass(at);if(Ot._clearMenus(),!e){var n={relatedTarget:this._element},e=X.Event(ot.SHOW,n);if(X(t).trigger(e),!e.isDefaultPrevented()){if(!this._inNavbar){if(void 0===s)throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");e=this._element;X(t).hasClass("dropup")&&(X(this._menu).hasClass("dropdown-menu-left")||X(this._menu).hasClass(lt))&&(e=t),"scrollParent"!==this._config.boundary&&X(t).addClass("position-static"),this._popper=new s(e,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===X(t).closest(".navbar-nav").length&&X("body").children().on("mouseover",null,X.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),X(this._menu).toggleClass(at),X(t).toggleClass(at).trigger(X.Event(ot.SHOWN,n))}}}},_t.dispose=function(){X.removeData(this._element,et),X(this._element).off(nt),this._element=null,(this._menu=null)!==this._popper&&(this._popper.destroy(),this._popper=null)},_t.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},_t._addEventListeners=function(){var e=this;X(this._element).on(ot.CLICK,function(t){t.preventDefault(),t.stopPropagation(),e.toggle()})},_t._getConfig=function(t){return t=b({},this.constructor.Default,X(this._element).data(),t),Et.typeCheckConfig(tt,t,this.constructor.DefaultType),t},_t._getMenuElement=function(){var t;return this._menu||(t=Ot._getParentFromElement(this._element),this._menu=X(t).find(ct)[0]),this._menu},_t._getPlacement=function(){var t=X(this._element).parent(),e="bottom-start";return t.hasClass("dropup")?(e="top-start",X(this._menu).hasClass(lt)&&(e="top-end")):t.hasClass("dropright")?e="right-start":t.hasClass("dropleft")?e="left-start":X(this._menu).hasClass(lt)&&(e="bottom-end"),e},_t._detectNavbar=function(){return 0<X(this._element).closest(".navbar").length},_t._getPopperConfig=function(){var e=this,t={};return"function"==typeof this._config.offset?t.fn=function(t){return t.offsets=b({},t.offsets,e._config.offset(t.offsets)||{}),t}:t.offset=this._config.offset,{placement:this._getPlacement(),modifiers:{offset:t,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}}},Ot._jQueryInterface=function(e){return this.each(function(){var t=X(this).data(et);if(t||(t=new Ot(this,"object"==typeof e?e:null),X(this).data(et,t)),"string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'+e+'"');t[e]()}})},Ot._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var e=X.makeArray(X(ht)),n=0;n<e.length;n++){var i,s=Ot._getParentFromElement(e[n]),o=X(e[n]).data(et),r={relatedTarget:e[n]};o&&(i=o._menu,!X(s).hasClass(at)||t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&X.contains(s,t.target)||(o=X.Event(ot.HIDE,r),X(s).trigger(o),o.isDefaultPrevented()||("ontouchstart"in document.documentElement&&X("body").children().off("mouseover",null,X.noop),e[n].setAttribute("aria-expanded","false"),X(i).removeClass(at),X(s).removeClass(at).trigger(X.Event(ot.HIDDEN,r)))))}},Ot._getParentFromElement=function(t){var e,n=Et.getSelectorFromElement(t);return(e=n?X(n)[0]:e)||t.parentNode},Ot._dataApiKeydownHandler=function(t){var e,n,i;(/input|textarea/i.test(t.target.tagName)?32===t.which||27!==t.which&&(40!==t.which&&38!==t.which||X(t.target).closest(ct).length):!st.test(t.which))||(t.preventDefault(),t.stopPropagation(),this.disabled||X(this).hasClass(rt))||(i=Ot._getParentFromElement(this),((n=X(i).hasClass(at))||27===t.which&&32===t.which)&&(!n||27!==t.which&&32!==t.which)?0!==(e=X(i).find(".dropdown-menu .dropdown-item:not(.disabled)").get()).length&&(n=e.indexOf(t.target),38===t.which&&0<n&&n--,40===t.which&&n<e.length-1&&n++,e[n=n<0?0:n].focus()):(27===t.which&&(i=X(i).find(ht)[0],X(i).trigger("focus")),X(this).trigger("click")))},T(Ot,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return ut}},{key:"DefaultType",get:function(){return dt}}]),ft=Ot,X(document).on(ot.KEYDOWN_DATA_API,ht,ft._dataApiKeydownHandler).on(ot.KEYDOWN_DATA_API,ct,ft._dataApiKeydownHandler).on(ot.CLICK_DATA_API+" "+ot.KEYUP_DATA_API,ft._clearMenus).on(ot.CLICK_DATA_API,ht,function(t){t.preventDefault(),t.stopPropagation(),ft._jQueryInterface.call(X(this),"toggle")}).on(ot.CLICK_DATA_API,".dropdown form",function(t){t.stopPropagation()}),X.fn[tt]=ft._jQueryInterface,X.fn[tt].Constructor=ft,X.fn[tt].noConflict=function(){return X.fn[tt]=it,ft._jQueryInterface},ft),wt=function(o){var t,r="bs.modal",e="."+r,n=o.fn.modal,i={backdrop:!0,keyboard:!0,focus:!0,show:!0},s={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},a={HIDE:"hide"+e,HIDDEN:"hidden"+e,SHOW:"show"+e,SHOWN:"shown"+e,FOCUSIN:"focusin"+e,RESIZE:"resize"+e,CLICK_DISMISS:"click.dismiss"+e,KEYDOWN_DISMISS:"keydown.dismiss"+e,MOUSEUP_DISMISS:"mouseup.dismiss"+e,MOUSEDOWN_DISMISS:"mousedown.dismiss"+e,CLICK_DATA_API:"click"+e+".data-api"},l="modal-open",h="fade",c="show",u=".modal-dialog",d='[data-toggle="modal"]',f='[data-dismiss="modal"]',g=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",_=".sticky-top",m=".navbar-toggler",p=((t=v.prototype).toggle=function(t){return this._isShown?this.hide():this.show(t)},t.show=function(t){var e,n=this;this._isTransitioning||this._isShown||(Et.supportsTransitionEnd()&&o(this._element).hasClass(h)&&(this._isTransitioning=!0),e=o.Event(a.SHOW,{relatedTarget:t}),o(this._element).trigger(e),this._isShown||e.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),o(document.body).addClass(l),this._setEscapeEvent(),this._setResizeEvent(),o(this._element).on(a.CLICK_DISMISS,f,function(t){return n.hide(t)}),o(this._dialog).on(a.MOUSEDOWN_DISMISS,function(){o(n._element).one(a.MOUSEUP_DISMISS,function(t){o(t.target).is(n._element)&&(n._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return n._showElement(t)})))},t.hide=function(t){var e=this;t&&t.preventDefault(),!this._isTransitioning&&this._isShown&&(t=o.Event(a.HIDE),o(this._element).trigger(t),this._isShown&&!t.isDefaultPrevented()&&(this._isShown=!1,(t=Et.supportsTransitionEnd()&&o(this._element).hasClass(h))&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),o(document).off(a.FOCUSIN),o(this._element).removeClass(c),o(this._element).off(a.CLICK_DISMISS),o(this._dialog).off(a.MOUSEDOWN_DISMISS),t?o(this._element).one(Et.TRANSITION_END,function(t){return e._hideModal(t)}).emulateTransitionEnd(300):this._hideModal()))},t.dispose=function(){o.removeData(this._element,r),o(window,document,this._element,this._backdrop).off(e),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},t.handleUpdate=function(){this._adjustDialog()},t._getConfig=function(t){return t=b({},i,t),Et.typeCheckConfig("modal",t,s),t},t._showElement=function(t){var e=this,n=Et.supportsTransitionEnd()&&o(this._element).hasClass(h);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,n&&Et.reflow(this._element),o(this._element).addClass(c),this._config.focus&&this._enforceFocus();var i=o.Event(a.SHOWN,{relatedTarget:t}),t=function(){e._config.focus&&e._element.focus(),e._isTransitioning=!1,o(e._element).trigger(i)};n?o(this._dialog).one(Et.TRANSITION_END,t).emulateTransitionEnd(300):t()},t._enforceFocus=function(){var e=this;o(document).off(a.FOCUSIN).on(a.FOCUSIN,function(t){document!==t.target&&e._element!==t.target&&0===o(e._element).has(t.target).length&&e._element.focus()})},t._setEscapeEvent=function(){var e=this;this._isShown&&this._config.keyboard?o(this._element).on(a.KEYDOWN_DISMISS,function(t){27===t.which&&(t.preventDefault(),e.hide())}):this._isShown||o(this._element).off(a.KEYDOWN_DISMISS)},t._setResizeEvent=function(){var e=this;this._isShown?o(window).on(a.RESIZE,function(t){return e.handleUpdate(t)}):o(window).off(a.RESIZE)},t._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){o(document.body).removeClass(l),t._resetAdjustments(),t._resetScrollbar(),o(t._element).trigger(a.HIDDEN)})},t._removeBackdrop=function(){this._backdrop&&(o(this._backdrop).remove(),this._backdrop=null)},t._showBackdrop=function(t){var e,n=this,i=o(this._element).hasClass(h)?h:"";this._isShown&&this._config.backdrop?(e=Et.supportsTransitionEnd()&&i,this._backdrop=document.createElement("div"),this._backdrop.className="modal-backdrop",i&&o(this._backdrop).addClass(i),o(this._backdrop).appendTo(document.body),o(this._element).on(a.CLICK_DISMISS,function(t){n._ignoreBackdropClick?n._ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"===n._config.backdrop?n._element.focus():n.hide())}),e&&Et.reflow(this._backdrop),o(this._backdrop).addClass(c),t&&(e?o(this._backdrop).one(Et.TRANSITION_END,t).emulateTransitionEnd(150):t())):!this._isShown&&this._backdrop?(o(this._backdrop).removeClass(c),e=function(){n._removeBackdrop(),t&&t()},Et.supportsTransitionEnd()&&o(this._element).hasClass(h)?o(this._backdrop).one(Et.TRANSITION_END,e).emulateTransitionEnd(150):e()):t&&t()},t._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},t._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},t._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=t.left+t.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},t._setScrollbar=function(){var t,e,s=this;this._isBodyOverflowing&&(o(g).each(function(t,e){var n=o(e)[0].style.paddingRight,i=o(e).css("padding-right");o(e).data("padding-right",n).css("padding-right",parseFloat(i)+s._scrollbarWidth+"px")}),o(_).each(function(t,e){var n=o(e)[0].style.marginRight,i=o(e).css("margin-right");o(e).data("margin-right",n).css("margin-right",parseFloat(i)-s._scrollbarWidth+"px")}),o(m).each(function(t,e){var n=o(e)[0].style.marginRight,i=o(e).css("margin-right");o(e).data("margin-right",n).css("margin-right",parseFloat(i)+s._scrollbarWidth+"px")}),t=document.body.style.paddingRight,e=o("body").css("padding-right"),o("body").data("padding-right",t).css("padding-right",parseFloat(e)+this._scrollbarWidth+"px"))},t._resetScrollbar=function(){o(g).each(function(t,e){var n=o(e).data("padding-right");void 0!==n&&o(e).css("padding-right",n).removeData("padding-right")}),o(_+", "+m).each(function(t,e){var n=o(e).data("margin-right");void 0!==n&&o(e).css("margin-right",n).removeData("margin-right")});var t=o("body").data("padding-right");void 0!==t&&o("body").css("padding-right",t).removeData("padding-right")},t._getScrollbarWidth=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e},v._jQueryInterface=function(n,i){return this.each(function(){var t=o(this).data(r),e=b({},v.Default,o(this).data(),"object"==typeof n&&n);if(t||(t=new v(this,e),o(this).data(r,t)),"string"==typeof n){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n](i)}else e.show&&t.show(i)})},T(v,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return i}}]),v);function v(t,e){this._config=this._getConfig(e),this._element=t,this._dialog=o(t).find(u)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._originalBodyPadding=0,this._scrollbarWidth=0}return o(document).on(a.CLICK_DATA_API,d,function(t){var e,n=this,i=Et.getSelectorFromElement(this);i&&(e=o(i)[0]);i=o(e).data(r)?"toggle":b({},o(e).data(),o(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var s=o(e).one(a.SHOW,function(t){t.isDefaultPrevented()||s.one(a.HIDDEN,function(){o(n).is(":visible")&&n.focus()})});p._jQueryInterface.call(o(e),i,this)}),o.fn.modal=p._jQueryInterface,o.fn.modal.Constructor=p,o.fn.modal.noConflict=function(){return o.fn.modal=n,p._jQueryInterface},p}(e),At=(U="tooltip",K="."+(W="bs.tooltip"),M=(x=e).fn[U],Q=new RegExp("(^|\\s)bs-tooltip\\S+","g"),V={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!(F={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"}),selector:!(B={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"}),placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},q={HIDE:"hide"+K,HIDDEN:"hidden"+K,SHOW:(Y="show")+K,SHOWN:"shown"+K,INSERTED:"inserted"+K,CLICK:"click"+K,FOCUSIN:"focusin"+K,FOCUSOUT:"focusout"+K,MOUSEENTER:"mouseenter"+K,MOUSELEAVE:"mouseleave"+K},z="fade",Z="show",J="hover",$="focus",(gt=Nt.prototype).enable=function(){this._isEnabled=!0},gt.disable=function(){this._isEnabled=!1},gt.toggleEnabled=function(){this._isEnabled=!this._isEnabled},gt.toggle=function(t){var e,n;this._isEnabled&&(t?(e=this.constructor.DATA_KEY,(n=x(t.currentTarget).data(e))||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),x(t.currentTarget).data(e,n)),n._activeTrigger.click=!n._activeTrigger.click,n._isWithActiveTrigger()?n._enter(null,n):n._leave(null,n)):x(this.getTipElement()).hasClass(Z)?this._leave(null,this):this._enter(null,this))},gt.dispose=function(){clearTimeout(this._timeout),x.removeData(this.element,this.constructor.DATA_KEY),x(this.element).off(this.constructor.EVENT_KEY),x(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&x(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,(this._activeTrigger=null)!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},gt.show=function(){var e=this;if("none"===x(this.element).css("display"))throw new Error("Please use show on visible elements");var t,n,i=x.Event(this.constructor.Event.SHOW);this.isWithContent()&&this._isEnabled&&(x(this.element).trigger(i),t=x.contains(this.element.ownerDocument.documentElement,this.element),!i.isDefaultPrevented()&&t&&(n=this.getTipElement(),i=Et.getUID(this.constructor.NAME),n.setAttribute("id",i),this.element.setAttribute("aria-describedby",i),this.setContent(),this.config.animation&&x(n).addClass(z),t="function"==typeof this.config.placement?this.config.placement.call(this,n,this.element):this.config.placement,i=this._getAttachment(t),this.addAttachmentClass(i),t=!1===this.config.container?document.body:x(this.config.container),x(n).data(this.constructor.DATA_KEY,this),x.contains(this.element.ownerDocument.documentElement,this.tip)||x(n).appendTo(t),x(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new s(this.element,n,{placement:i,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:".arrow"},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(t){t.originalPlacement!==t.placement&&e._handlePopperPlacementChange(t)},onUpdate:function(t){e._handlePopperPlacementChange(t)}}),x(n).addClass(Z),"ontouchstart"in document.documentElement&&x("body").children().on("mouseover",null,x.noop),n=function(){e.config.animation&&e._fixTransition();var t=e._hoverState;e._hoverState=null,x(e.element).trigger(e.constructor.Event.SHOWN),"out"===t&&e._leave(null,e)},Et.supportsTransitionEnd()&&x(this.tip).hasClass(z)?x(this.tip).one(Et.TRANSITION_END,n).emulateTransitionEnd(Nt._TRANSITION_DURATION):n()))},gt.hide=function(t){function e(){n._hoverState!==Y&&i.parentNode&&i.parentNode.removeChild(i),n._cleanTipClass(),n.element.removeAttribute("aria-describedby"),x(n.element).trigger(n.constructor.Event.HIDDEN),null!==n._popper&&n._popper.destroy(),t&&t()}var n=this,i=this.getTipElement(),s=x.Event(this.constructor.Event.HIDE);x(this.element).trigger(s),s.isDefaultPrevented()||(x(i).removeClass(Z),"ontouchstart"in document.documentElement&&x("body").children().off("mouseover",null,x.noop),this._activeTrigger.click=!1,this._activeTrigger[$]=!1,this._activeTrigger[J]=!1,Et.supportsTransitionEnd()&&x(this.tip).hasClass(z)?x(i).one(Et.TRANSITION_END,e).emulateTransitionEnd(150):e(),this._hoverState="")},gt.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},gt.isWithContent=function(){return Boolean(this.getTitle())},gt.addAttachmentClass=function(t){x(this.getTipElement()).addClass("bs-tooltip-"+t)},gt.getTipElement=function(){return this.tip=this.tip||x(this.config.template)[0],this.tip},gt.setContent=function(){var t=x(this.getTipElement());this.setElementContent(t.find(".tooltip-inner"),this.getTitle()),t.removeClass(z+" "+Z)},gt.setElementContent=function(t,e){var n=this.config.html;"object"==typeof e&&(e.nodeType||e.jquery)?n?x(e).parent().is(t)||t.empty().append(e):t.text(x(e).text()):t[n?"html":"text"](e)},gt.getTitle=function(){return this.element.getAttribute("data-original-title")||("function"==typeof this.config.title?this.config.title.call(this.element):this.config.title)},gt._getAttachment=function(t){return F[t.toUpperCase()]},gt._setListeners=function(){var n=this;this.config.trigger.split(" ").forEach(function(t){var e;"click"===t?x(n.element).on(n.constructor.Event.CLICK,n.config.selector,function(t){return n.toggle(t)}):"manual"!==t&&(e=t===J?n.constructor.Event.MOUSEENTER:n.constructor.Event.FOCUSIN,t=t===J?n.constructor.Event.MOUSELEAVE:n.constructor.Event.FOCUSOUT,x(n.element).on(e,n.config.selector,function(t){return n._enter(t)}).on(t,n.config.selector,function(t){return n._leave(t)})),x(n.element).closest(".modal").on("hide.bs.modal",function(){return n.hide()})}),this.config.selector?this.config=b({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},gt._fixTitle=function(){var t=typeof this.element.getAttribute("data-original-title");!this.element.getAttribute("title")&&"string"==t||(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},gt._enter=function(t,e){var n=this.constructor.DATA_KEY;(e=e||x(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),x(t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusin"===t.type?$:J]=!0),x(e.getTipElement()).hasClass(Z)||e._hoverState===Y?e._hoverState=Y:(clearTimeout(e._timeout),e._hoverState=Y,e.config.delay&&e.config.delay.show?e._timeout=setTimeout(function(){e._hoverState===Y&&e.show()},e.config.delay.show):e.show())},gt._leave=function(t,e){var n=this.constructor.DATA_KEY;(e=e||x(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),x(t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusout"===t.type?$:J]=!1),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState="out",e.config.delay&&e.config.delay.hide?e._timeout=setTimeout(function(){"out"===e._hoverState&&e.hide()},e.config.delay.hide):e.hide())},gt._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},gt._getConfig=function(t){return"number"==typeof(t=b({},this.constructor.Default,x(this.element).data(),t)).delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),Et.typeCheckConfig(U,t,this.constructor.DefaultType),t},gt._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},gt._cleanTipClass=function(){var t=x(this.getTipElement()),e=t.attr("class").match(Q);null!==e&&0<e.length&&t.removeClass(e.join(""))},gt._handlePopperPlacementChange=function(t){this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},gt._fixTransition=function(){var t=this.getTipElement(),e=this.config.animation;null===t.getAttribute("x-placement")&&(x(t).removeClass(z),this.config.animation=!1,this.hide(),this.show(),this.config.animation=e)},Nt._jQueryInterface=function(n){return this.each(function(){var t=x(this).data(W),e="object"==typeof n&&n;if((t||!/dispose|hide/.test(n))&&(t||(t=new Nt(this,e),x(this).data(W,t)),"string"==typeof n)){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}})},T(Nt,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return V}},{key:"NAME",get:function(){return U}},{key:"DATA_KEY",get:function(){return W}},{key:"Event",get:function(){return q}},{key:"EVENT_KEY",get:function(){return K}},{key:"DefaultType",get:function(){return B}}]),G=Nt,x.fn[U]=G._jQueryInterface,x.fn[U].Constructor=G,x.fn[U].noConflict=function(){return x.fn[U]=M,G._jQueryInterface},G),Dt=(S="popover",O="."+(N="bs.popover"),k=(D=e).fn[S],P=new RegExp("(^|\\s)bs-popover\\S+","g"),j=b({},At.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),H=b({},At.DefaultType,{content:"(string|element|function)"}),L={HIDE:"hide"+O,HIDDEN:"hidden"+O,SHOW:"show"+O,SHOWN:"shown"+O,INSERTED:"inserted"+O,CLICK:"click"+O,FOCUSIN:"focusin"+O,FOCUSOUT:"focusout"+O,MOUSEENTER:"mouseenter"+O,MOUSELEAVE:"mouseleave"+O},R=function(t){var e;function i(){return t.apply(this,arguments)||this}n=t,(e=i).prototype=Object.create(n.prototype),(e.prototype.constructor=e).__proto__=n;var n=i.prototype;return n.isWithContent=function(){return this.getTitle()||this._getContent()},n.addAttachmentClass=function(t){D(this.getTipElement()).addClass("bs-popover-"+t)},n.getTipElement=function(){return this.tip=this.tip||D(this.config.template)[0],this.tip},n.setContent=function(){var t=D(this.getTipElement());this.setElementContent(t.find(".popover-header"),this.getTitle());var e=this._getContent();"function"==typeof e&&(e=e.call(this.element)),this.setElementContent(t.find(".popover-body"),e),t.removeClass("fade show")},n._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},n._cleanTipClass=function(){var t=D(this.getTipElement()),e=t.attr("class").match(P);null!==e&&0<e.length&&t.removeClass(e.join(""))},i._jQueryInterface=function(n){return this.each(function(){var t=D(this).data(N),e="object"==typeof n?n:null;if((t||!/destroy|hide/.test(n))&&(t||(t=new i(this,e),D(this).data(N,t)),"string"==typeof n)){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}})},T(i,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return j}},{key:"NAME",get:function(){return S}},{key:"DATA_KEY",get:function(){return N}},{key:"Event",get:function(){return L}},{key:"EVENT_KEY",get:function(){return O}},{key:"DefaultType",get:function(){return H}}]),i}(At),D.fn[S]=R._jQueryInterface,D.fn[S].Constructor=R,D.fn[S].noConflict=function(){return D.fn[S]=k,R._jQueryInterface},R),_t=function(o){var t,n="scrollspy",i="bs.scrollspy",e="."+i,s=o.fn[n],r={offset:10,method:"auto",target:""},a={offset:"number",method:"string",target:"(string|element)"},l={ACTIVATE:"activate"+e,SCROLL:"scroll"+e,LOAD_DATA_API:"load"+e+".data-api"},h="active",c='[data-spy="scroll"]',u=".active",d=".nav, .list-group",f=".nav-link",g=".nav-item",_=".list-group-item",m=".dropdown",p=".dropdown-item",v=".dropdown-toggle",E="position",y=((t=C.prototype).refresh=function(){var e=this,t=this._scrollElement===this._scrollElement.window?"offset":E,i="auto"===this._config.method?t:this._config.method,s=i===E?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),o.makeArray(o(this._selector)).map(function(t){var e,n=Et.getSelectorFromElement(t);if(e=n?o(n)[0]:e){t=e.getBoundingClientRect();if(t.width||t.height)return[o(e)[i]().top+s,n]}return null}).filter(function(t){return t}).sort(function(t,e){return t[0]-e[0]}).forEach(function(t){e._offsets.push(t[0]),e._targets.push(t[1])})},t.dispose=function(){o.removeData(this._element,i),o(this._scrollElement).off(e),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},t._getConfig=function(t){var e;return"string"!=typeof(t=b({},r,t)).target&&((e=o(t.target).attr("id"))||(e=Et.getUID(n),o(t.target).attr("id",e)),t.target="#"+e),Et.typeCheckConfig(n,t,a),t},t._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},t._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},t._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},t._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),n<=t){n=this._targets[this._targets.length-1];this._activeTarget!==n&&this._activate(n)}else{if(this._activeTarget&&t<this._offsets[0]&&0<this._offsets[0])return this._activeTarget=null,void this._clear();for(var i=this._offsets.length;i--;)this._activeTarget!==this._targets[i]&&t>=this._offsets[i]&&(void 0===this._offsets[i+1]||t<this._offsets[i+1])&&this._activate(this._targets[i])}},t._activate=function(e){this._activeTarget=e,this._clear();var t=(t=this._selector.split(",")).map(function(t){return t+'[data-target="'+e+'"],'+t+'[href="'+e+'"]'}),t=o(t.join(","));t.hasClass("dropdown-item")?(t.closest(m).find(v).addClass(h),t.addClass(h)):(t.addClass(h),t.parents(d).prev(f+", "+_).addClass(h),t.parents(d).prev(g).children(f).addClass(h)),o(this._scrollElement).trigger(l.ACTIVATE,{relatedTarget:e})},t._clear=function(){o(this._selector).filter(u).removeClass(h)},C._jQueryInterface=function(e){return this.each(function(){var t=o(this).data(i);if(t||(t=new C(this,"object"==typeof e&&e),o(this).data(i,t)),"string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'+e+'"');t[e]()}})},T(C,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return r}}]),C);function C(t,e){var n=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(e),this._selector=this._config.target+" "+f+","+this._config.target+" "+_+","+this._config.target+" "+p,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,o(this._scrollElement).on(l.SCROLL,function(t){return n._process(t)}),this.refresh(),this._process()}return o(window).on(l.LOAD_DATA_API,function(){for(var t=o.makeArray(o(c)),e=t.length;e--;){var n=o(t[e]);y._jQueryInterface.call(n,n.data())}}),o.fn[n]=y._jQueryInterface,o.fn[n].Constructor=y,o.fn[n].noConflict=function(){return o.fn[n]=s,y._jQueryInterface},y}(e),gt=(gt="."+(v="bs.tab"),E=(p=e).fn.tab,y={HIDE:"hide"+gt,HIDDEN:"hidden"+gt,SHOW:"show"+gt,SHOWN:"shown"+gt,CLICK_DATA_API:"click.bs.tab.data-api"},C="active",I=".active",w="> li > .active",(gt=St.prototype).show=function(){var t,e,n,i,s,o,r=this;this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&p(this._element).hasClass(C)||p(this._element).hasClass("disabled")||(o=p(this._element).closest(".nav, .list-group")[0],e=Et.getSelectorFromElement(this._element),o&&(s="UL"===o.nodeName?w:I,n=(n=p.makeArray(p(o).find(s)))[n.length-1]),i=p.Event(y.HIDE,{relatedTarget:this._element}),s=p.Event(y.SHOW,{relatedTarget:n}),n&&p(n).trigger(i),p(this._element).trigger(s),s.isDefaultPrevented()||i.isDefaultPrevented()||(e&&(t=p(e)[0]),this._activate(this._element,o),o=function(){var t=p.Event(y.HIDDEN,{relatedTarget:r._element}),e=p.Event(y.SHOWN,{relatedTarget:n});p(n).trigger(t),p(r._element).trigger(e)},t?this._activate(t,t.parentNode,o):o()))},gt.dispose=function(){p.removeData(this._element,v),this._element=null},gt._activate=function(t,e,n){var i=this,s=("UL"===e.nodeName?p(e).find(w):p(e).children(I))[0],o=n&&Et.supportsTransitionEnd()&&s&&p(s).hasClass("fade"),e=function(){return i._transitionComplete(t,s,n)};s&&o?p(s).one(Et.TRANSITION_END,e).emulateTransitionEnd(150):e()},gt._transitionComplete=function(t,e,n){var i;e&&(p(e).removeClass("show "+C),(i=p(e.parentNode).find("> .dropdown-menu .active")[0])&&p(i).removeClass(C),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)),p(t).addClass(C),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),Et.reflow(t),p(t).addClass("show"),t.parentNode&&p(t.parentNode).hasClass("dropdown-menu")&&((e=p(t).closest(".dropdown")[0])&&p(e).find(".dropdown-toggle").addClass(C),t.setAttribute("aria-expanded",!0)),n&&n()},St._jQueryInterface=function(n){return this.each(function(){var t=p(this),e=t.data(v);if(e||(e=new St(this),t.data(v,e)),"string"==typeof n){if(void 0===e[n])throw new TypeError('No method named "'+n+'"');e[n]()}})},T(St,null,[{key:"VERSION",get:function(){return"4.0.0"}}]),A=St,p(document).on(y.CLICK_DATA_API,'[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',function(t){t.preventDefault(),A._jQueryInterface.call(p(this),"show")}),p.fn.tab=A._jQueryInterface,p.fn.tab.Constructor=A,p.fn.tab.noConflict=function(){return p.fn.tab=E,A._jQueryInterface},A);function St(t){this._element=t}function Nt(t,e){if(void 0===s)throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}function Ot(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}function kt(t){this._element=t}function Pt(t){this._element=t}!function(t){if(void 0===t)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");t=t.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1===t[0]&&9===t[1]&&t[2]<1||4<=t[0])throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}(e),t.Util=Et,t.Alert=yt,t.Button=Ct,t.Carousel=Tt,t.Collapse=bt,t.Dropdown=It,t.Modal=wt,t.Popover=Dt,t.Scrollspy=_t,t.Tab=gt,t.Tooltip=At,Object.defineProperty(t,"__esModule",{value:!0})});
const income=document.querySelector(".income"),sickDays=document.querySelector(".sick-days"),tubercolosis=document.querySelector(".tubercolosis"),calculateBtn=document.querySelector(".calculate-btn"),totalMoney=document.querySelector(".total-money"),totalSickDays=document.querySelector(".total-sick-days"),dailyAllowance=document.querySelectorAll(".daily-allowance"),empCompMoney=document.querySelector(".total-comp-emp"),incCompMoney=document.querySelector(".total-comp-inc"),empDaysTotal=document.querySelector(".comp-days-emp-total"),incDaysTotal=document.querySelector(".comp-days-inc-total"),calculatedInfo=document.querySelector(".calculated-info");calculateBtn.addEventListener("click",function(e){e.preventDefault(),sickDaysInt=parseInt(sickDays.value),!0===tubercolosis.checked&&183<=sickDaysInt&&sickDaysInt<=240?(sickDays.value=sickDaysInt,sickDays.innerHTML=sickDays):sickDaysInt<=4?sickDays.value=4:!1===tubercolosis.checked&&sickDaysInt<=183?sickDays.value=sickDaysInt:!1===tubercolosis.checked&&183<=sickDaysInt?sickDays.value=182:!0===tubercolosis.checked&&240<=sickDaysInt&&(sickDays.value=240);var n=parseInt(income.value),t=parseInt(sickDays.value);totalSickDays.innerHTML=t;for(let e=0;e<dailyAllowance.length;e++){const a=n/30*t*.7/t;dailyAllowance[e].innerHTML=a.toFixed(2)+" â¬"}const a=n/30*t*.7/t;dailyAllowance.innerHTML=a.toFixed(2);e=parseFloat(dailyAllowance.innerHTML);t<=8?(empDaysTotal.innerHTML=t-3+" days",empCompMoney.innerHTML=(parseInt(empDaysTotal.innerHTML)*e).toFixed(2),incDaysTotal.innerHTML="0 days",incCompMoney.innerHTML=0):9<=t&&(empDaysTotal.innerHTML="5 days",empCompMoney.innerHTML=(5*e).toFixed(2),incDaysTotal.innerHTML=t-parseInt(empDaysTotal.innerHTML)-3+" days",incCompMoney.innerHTML=(parseInt(incDaysTotal.innerHTML)*e).toFixed(2)),totalMoneyEnd=parseFloat(empCompMoney.innerHTML)+parseFloat(incCompMoney.innerHTML),totalMoney.innerHTML=totalMoneyEnd.toFixed(2)}),$(document).ready(function(){$('input[type="number"]').on("keyup",function(){v=parseInt($(this).val()),min=parseInt($(this).attr("min")),max=parseInt($(this).attr("max")),v>max&&$(this).val(max)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
